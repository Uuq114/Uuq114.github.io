{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/images/Eric-cartman.webp","path":"images/Eric-cartman.webp","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/book-solid.svg","path":"images/book-solid.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Linux-ptrace.md","hash":"76f265b69b1f91ab769cad5fbd8075ee741b4565","modified":1684032254809},{"_id":"source/_posts/blog-update-log.md","hash":"55b64f111b29d52670fde4799d4296d8ac09db65","modified":1684048835414},{"_id":"source/_posts/elasticsearch-usage.md","hash":"00c7233bc1faa46e5b2d9c6e694214d73f0738d8","modified":1685106995902},{"_id":"source/_posts/elasticsearch.md","hash":"59b24513c20c7c9ab748ace2cc9263ea736db760","modified":1685088263588},{"_id":"source/_posts/helloworld.md","hash":"f1de40b89714d87cdf61c121265739a548d49555","modified":1684032254819},{"_id":"source/_posts/jane-street-puzzle-2023.1.md","hash":"2b2805b8cb311506cb575ba45abd57a1bccadfdc","modified":1684056263200},{"_id":"source/_posts/optimized_cpp-ch2.md","hash":"dd68dc890578d03337499f547364727a7392dfe0","modified":1684034320048},{"_id":"source/_posts/register.md","hash":"69ffe16bdb2a7a81d29f0434fb9c8e7b88490692","modified":1684034330931},{"_id":"source/_posts/ubuntu-grafana.md","hash":"b953117846a3c3308460fe4e98be00f76f5780dd","modified":1689754036263},{"_id":"source/_drafts/go-redis.md","hash":"eb54db4ef31e505294bfd985dfa52b80b42a358d","modified":1684077422095},{"_id":"source/categories/index.md","hash":"5b767f168e47ced60363ad8f1446f6035f960efe","modified":1684032254821},{"_id":"source/tags/index.md","hash":"ec8e120277d45e8f7bd5c5e6db4ceb1b4a7a8b65","modified":1684032254822},{"_id":"source/_posts/ubuntu-grafana/image-20230719160714202.png","hash":"8e2c4b893df358b4b6765aaa401504edafa21601","modified":1689754034220},{"_id":"source/_posts/Linux-ptrace/output.png","hash":"671e7696f0148d63f8543f7fed03309b40eed1a5","modified":1684032254810},{"_id":"source/_posts/ubuntu-grafana/image-20230719160454386.png","hash":"fe8c81deae3c15272aa6de6d70830deadb9e05da","modified":1689753894598},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1684032254823},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1684032254824},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1684032254824},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1684032254835},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1684032254837},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1684032254837},{"_id":"themes/next/_config.yml","hash":"3e20afc517d140ae0abe7c9feca18df3c80e751d","modified":1684048369611},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1684032254839},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1684032254836},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1684032254952},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1684032254837},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1684032254884},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1684032254830},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1684032254825},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1684032254832},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1684032254826},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1684032254831},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1684032254831},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1684032254833},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1684032254833},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1684032254834},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1684032254834},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1684032254835},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1684032254862},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1684032254864},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1684032254863},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1684032254863},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1684032254873},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1684032254873},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1684032254873},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1684032254874},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1684032254886},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1684032254885},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1684032254887},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1684032254886},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1684032254887},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1684032254874},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1684032254888},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1684032254889},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1684032254889},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1684032254890},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1684032254891},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1684032254891},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1684032254892},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1684032254892},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1684032254893},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1684032254894},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1684032254894},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1684032254895},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1684032254896},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1684032254896},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1684032254899},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1684032254897},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1684032254898},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1684032254897},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1684032254947},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1684032254948},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1684032254949},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1684032254949},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1684032254950},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1684032254951},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1684032254970},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1684032254827},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1684032254829},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1684032254828},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1684032254830},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1684032254879},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1684032254880},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1684032254879},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1684032254881},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1684032254881},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1684032254882},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1684032254882},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1684032254883},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1684032254884},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1684032254875},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1684032254876},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1684032254900},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1684032254901},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1684032254878},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1684032254901},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1684032254878},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1684032254902},{"_id":"themes/next/layout/_partials/footer.swig","hash":"5b06fa5348f79a0417fcbfd8b634648f60c9eb47","modified":1684032254902},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1684032254908},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1684032254910},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1684032254917},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1684032254919},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1684032254919},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1684032254921},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1684032254925},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1684032254924},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1684032254929},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1684032254935},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1684032254938},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1684032254939},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1684032254967},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1684032254954},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1684032254968},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1684032254969},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1684032254968},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1684032254964},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1684032254964},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1684032254965},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1684032254966},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1684032254966},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1684032254970},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1684032254971},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1684032254972},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1684032254972},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1684032254973},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1684032254974},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1684032254973},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1684032254975},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1684032254976},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1684032254975},{"_id":"themes/next/source/images/Eric-cartman.webp","hash":"ce99b21733b561489b3ad867d4ec29ee91bfc6e4","modified":1684032255042},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1684032255042},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1684032255042},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1684032255043},{"_id":"themes/next/source/images/book-solid.svg","hash":"2a1d165260cd7784a10202c111253a7cdacb4128","modified":1684032255043},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1684032255043},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1684032255045},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1684032255045},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1684032255045},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1684032255045},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1684032255047},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1684032255047},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1684032255046},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1684032255047},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1684032255048},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1684032255049},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1684032255051},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1684032255050},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1684032255052},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1684032255048},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1684032255049},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1684032254977},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1684032255023},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1684032255040},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1684032255053},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1684032254903},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1684032254905},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1684032254905},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1684032254906},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1684032254906},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1684032254907},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1684032254907},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1684032254909},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1684032254909},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1684032254912},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1684032254911},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1684032254912},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1684032254913},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1684032254914},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1684032254917},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1684032254915},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1684032254916},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1684032254915},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1684032254921},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1684032254922},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1684032254923},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1684032254923},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1684032254923},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1684032254927},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1684032254926},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1684032254928},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1684032254930},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1684032254930},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1684032254931},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1684032254932},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1684032254933},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1684032254933},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1684032254928},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1684032254934},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1684032254935},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1684032254936},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1684032254937},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1684032254939},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1684032254937},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1684032254941},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1684032254940},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1684032254945},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1684032254946},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1684032254942},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1684032254942},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1684032254943},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1684032254955},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1684032254944},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1684032254944},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1684032254955},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1684032254956},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1684032254958},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1684032254959},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1684032254960},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1684032254960},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1684032254961},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1684032254962},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1684032254962},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1684032254963},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1684032255052},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1684032255037},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1684032255039},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1684032255039},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1684032255051},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1684032255058},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1684032255039},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1684032255059},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1684032255037},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1684032254979},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1684032254980},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1684032254979},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1684032254992},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1684032255003},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1684032255024},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1684032255002},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1684032255025},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1684032255025},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1684032255028},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1684032255026},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1684032255010},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1684032255028},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1684032255011},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1684032255011},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1684032255015},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1684032255016},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1684032255016},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1684032255017},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1684032255022},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1684032255028},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1684032255029},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1684032255031},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1684032255031},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1684032255032},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1684032255030},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1684032255033},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1684032255034},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1684032255034},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1684032255031},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1684032255035},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1684032255036},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1684032255055},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1684032255056},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1684032254981},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1684032254981},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1684032254982},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1684032254983},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1684032254983},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1684032254985},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1684032254986},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1684032254985},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1684032254986},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1684032254987},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1684032254988},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1684032254988},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1684032254987},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1684032254989},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1684032254990},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1684032254990},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1684032254991},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1684032254991},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1684032254993},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1684032254993},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1684032254994},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1684032254995},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1684032254995},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1684032254997},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1684032254998},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1684032254999},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1684032255000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1684032255000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1684032254998},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1684032255001},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1684032255001},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1684032255004},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1684032255004},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1684032255005},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1684032255006},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1684032255006},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1684032255007},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1684032255007},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1684032255008},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1684032255009},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1684032255009},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1684032255013},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1684032255014},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1684032255014},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1684032255018},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1684032255012},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1684032255019},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1684032255019},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1684032255020},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1684032255020},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1684032255022},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1684032255021},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1684032255056},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1684032255057},{"_id":"public/search.xml","hash":"13ecdb02ef9cc00045eb67f21c9d4b6699c88263","modified":1689754058583},{"_id":"public/tags/index.html","hash":"04cbc53bee84f47e987e9503a05f6872d8a0b706","modified":1689754058583},{"_id":"public/categories/Blog/index.html","hash":"9ff0d1bae0764722261f5cb1aa06dfb5a3b170ea","modified":1689754058583},{"_id":"public/categories/语言/index.html","hash":"0e018c4b51a3e1842b3389d68d8a249382b797db","modified":1689754058583},{"_id":"public/categories/数据可视化/index.html","hash":"9310f880e7f1853a0902c0f1481f97f1bf182139","modified":1689754058583},{"_id":"public/archives/2021/12/index.html","hash":"9eb3359a6985d2ded1b3779f9787807fd719247e","modified":1689754058583},{"_id":"public/archives/2023/07/index.html","hash":"42de104cb7a0a59d637ef7c8a7ef71ac70fc2df6","modified":1689754058583},{"_id":"public/tags/Linux/index.html","hash":"c42cf60639a03118506149cc3835d870376ebe0b","modified":1689754058583},{"_id":"public/tags/Puzzle/index.html","hash":"7c78df7c99067ceec4403d65d75874e8e771fa11","modified":1689754058583},{"_id":"public/tags/Register/index.html","hash":"b94d246ea65c3101a2d7c0dd5dc893b518e8694a","modified":1689754058583},{"_id":"public/tags/GDB/index.html","hash":"901f4e02b5c494edae3594682f4f92406dc0bfb2","modified":1689754058583},{"_id":"public/tags/C/index.html","hash":"e527be178d465f58edfaba3aaea1edfb08f4abb0","modified":1689754058583},{"_id":"public/categories/index.html","hash":"be1375fe58fb23dc239ab1c9451155861730c7fd","modified":1689754058583},{"_id":"public/2023/07/19/33/index.html","hash":"b47f55737f856ff01ef0f905d080a4694a99415f","modified":1689754058583},{"_id":"public/2023/05/26/26/index.html","hash":"ccd41c7fcd59b9641553a8f12dd1a8b0c397ba41","modified":1689754058583},{"_id":"public/2023/05/25/11/index.html","hash":"c63e8660fd28aaa82172bfa352d53fbf7664ab74","modified":1689754058583},{"_id":"public/2023/05/14/39/index.html","hash":"06680411b16d0f6f58811adae50af028e32de26f","modified":1689754058583},{"_id":"public/2021/12/04/52/index.html","hash":"b0464f83f871a03db72f53b20eea8a3f060e2c89","modified":1689754058583},{"_id":"public/2021/11/22/50/index.html","hash":"666305043914838058471eb5fa7ce9e93cc5660b","modified":1689754058583},{"_id":"public/2021/11/13/47/index.html","hash":"d0010c5428511faf1fb0232403720c35c335aeb1","modified":1689754058583},{"_id":"public/2021/11/13/39/index.html","hash":"035fbe03263db8281412b5f671743c238e9aebce","modified":1689754058583},{"_id":"public/2021/11/12/17/index.html","hash":"3d879f609471dd12f13e52d0e958cc49a1fc4ac0","modified":1689754058583},{"_id":"public/categories/操作系统/index.html","hash":"7e3d917fb252f6950a0bd6ae53d045026b9a2e5b","modified":1689754058583},{"_id":"public/categories/搜索引擎/index.html","hash":"bb690f316b4a134cdbc0d33d3cf48d7b83fcfa79","modified":1689754058583},{"_id":"public/categories/随笔/index.html","hash":"d523b04ebe0a35155e39ee033308064500a5d7df","modified":1689754058583},{"_id":"public/archives/index.html","hash":"1c2dc27cb01149bb8c30619fa7e88434b335de2c","modified":1689754058583},{"_id":"public/archives/2021/index.html","hash":"6810ee66aa9456b5008c072847a88831ffd9cf11","modified":1689754058583},{"_id":"public/archives/2021/11/index.html","hash":"47ca2aa66d5a5f11e13623cfb6585bb016f707c3","modified":1689754058583},{"_id":"public/archives/2023/index.html","hash":"12072b004f31be0df5634b99391d40adb0e15885","modified":1689754058583},{"_id":"public/archives/2023/05/index.html","hash":"3accced283ce94e219d718d83159dd530595c533","modified":1689754058583},{"_id":"public/index.html","hash":"75a42cda8572780aae52bcc422699a534e793ed9","modified":1689754058583},{"_id":"public/tags/Elasticsearch/index.html","hash":"b629874b2caccf0dddecc3c3d55529575b08550b","modified":1689754058583},{"_id":"public/tags/Grafana/index.html","hash":"6675945c055d7176cef0d97db56d15a2a541b778","modified":1689754058583},{"_id":"public/tags/Docker/index.html","hash":"118c75c574b71dbf660165becd39150879a3b22c","modified":1689754058583},{"_id":"public/images/Eric-cartman.webp","hash":"ce99b21733b561489b3ad867d4ec29ee91bfc6e4","modified":1689754058583},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1689754058583},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1689754058583},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1689754058583},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1689754058583},{"_id":"public/images/book-solid.svg","hash":"2a1d165260cd7784a10202c111253a7cdacb4128","modified":1689754058583},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1689754058583},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1689754058583},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1689754058583},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1689754058583},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1689754058583},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1689754058583},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1689754058583},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1689754058583},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1689754058583},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1689754058583},{"_id":"public/2021/12/04/52/output.png","hash":"671e7696f0148d63f8543f7fed03309b40eed1a5","modified":1689754058583},{"_id":"public/2023/07/19/33/image-20230719160714202.png","hash":"8e2c4b893df358b4b6765aaa401504edafa21601","modified":1689754058583},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1689754058583},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1689754058583},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1689754058583},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1689754058583},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1689754058583},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1689754058583},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1689754058583},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1689754058583},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1689754058583},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1689754058583},{"_id":"public/css/main.css","hash":"c0ed3630a184a7bcf9a70f70211899888b88b78f","modified":1689754058583},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1689754058583},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1689754058583},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1689754058583},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1689754058583},{"_id":"public/2023/07/19/33/image-20230719160454386.png","hash":"fe8c81deae3c15272aa6de6d70830deadb9e05da","modified":1689754058583}],"Category":[{"name":"操作系统","_id":"clk9fxsxr00047ksh8rzmag7v"},{"name":"Blog","_id":"clk9fxsy000097kshgzrhh46s"},{"name":"搜索引擎","_id":"clk9fxsy5000f7ksh4d2i3u7a"},{"name":"随笔","_id":"clk9fxsyh000q7kshdwnj3dsc"},{"name":"语言","_id":"clk9fxsyj000x7ksh7vh0gics"},{"name":"数据可视化","_id":"clk9fxsyl00137ksh14a16vp9"},{"name":"造轮子","_id":"clk9fxsyn00177kshcalf5m9q"}],"Data":[],"Page":[{"title":"分类","date":"2023-05-13T09:07:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-05-13 17:07:13\ntype: \"categories\"\n---\n","updated":"2023-05-14T02:44:14.821Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clk9fxsxd00007ksh4m8b0oap","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"标签","date":"2023-05-13T09:03:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-05-13 17:03:26\ntype: \"tags\"\n---\n","updated":"2023-05-14T02:44:14.822Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clk9fxsxm00027kshdwa5568y","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"}],"Post":[{"title":"Linux ptrace","top":0,"copyright":true,"date":"2021-12-04T13:27:52.000Z","updated":"2021-12-04T13:27:52.000Z","password":null,"comments":1,"keywords":null,"description":null,"_content":"\n# 简介\n\n最近的项目中需要用到`ptrace`这样的系统调用函数，这里总结一下要注意的地方。\n\n<!-- more -->\n\n## 系统调用\n\n在编写程序的时候，我们会使用编程语言提供的库函数，例如`read()`、`fork()`，这些库函数实际上是对一些底层操作的包装。这些底层操作就称为系统调用。\n\n一个系统调用包括：\n\n* 编号，用于区分\n* 参数\n* 寄存器，用于存放参数\n\n\n\n例如，`write()`会被转换成：\n\n```asm\nwrite(2, \"Hello\", 5);\n/*----------------*/\nmovl $1,%eax\t; 系统调用号\nmovl $2,%ebx\nmovl $hello,%ecx\nmovl $5,%edx\nint $0x80\t\t; 中断\n```\n\n\n\n## `ptrace`\n\n`ptrace`可以让一个进程（tracer）监视和控制另一个进程（tracee），并且可以改变内存和寄存器的内容，一般用于debug。\n\n`ptrace`起作用的时间：在执行system call之前，kernel会检查process是否被追踪。如果是的，那么kernel会中止tracee并将控制权交给追踪者。\n\n\n\n**一个例子**：\n\n```c\n#include <sys/ptrace.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <sys/user.h> // ORIG_RAX\n#include <sys/reg.h> // ORIG_RAX\n#include <stdio.h>\n\nint main() {\n    pid_t child;\n    long orig_eax;\n    child = fork();\n    if(child == 0) {\n        ptrace(PTRACE_TRACEME, 0, NULL, NULL);\n        execl(\"/bin/ls\", \"ls\", NULL);\n    }\n    else {\n        wait(NULL);\n        orig_eax = ptrace(PTRACE_PEEKUSER,\n                          child, 8 * ORIG_RAX, // 在64位的机器上，所以要乘8，如果是32位乘4\n                          NULL);\n        /* 也可以用下面的方法得到orig_eax，不需要计算register位置\n       \tstruct user_regs_struct regs;\n\t\tptrace(PTRACE_GETREGS, child, NULL, &regs);\n\t\tprintf(\"The child made a system call %ldn\", regs.orig_rax);\n        */\n        printf(\"The child made a \"\n               \"system call %ld\\n\", orig_eax);\n        ptrace(PTRACE_CONT, child, NULL, NULL);\n    }\n    return 0;\n}\n```\n\n输出是：\n\n![output](output.png)\n\n对例子的分析：\n\n在12行调用了`fork`，child会先调用`ptrace`，`flag`为`PTRACE_TRACEME`，告诉kernel它正在被追踪，于是在child执行`execve` system call时，控制权会被交给parent。\n\nparent使用`wait`等待kernel的通知。之后parent可以检视参数（读register）。\n\n当系统调用发生时，kernel会保存eax的内容，parent可以用`ptrace`的`PTRACE_PEEKUSER`参数读这个值，如19行。\n\nparent完成检视之后，以`PTRACE_CONT`参数调用`ptrace`，可以继续system call。\n\n> 运行的结果是`59`，和原网址的结果`11`不同，原因是什么？\n>\n> `asm/unistd.h`文件在i386、ILP32和64位机上的不同，`asm/unistd_64.h`中有：`#define __NR_execve 59`\n\n\n\n`ptrace`的**用法**：\n\n```c\nlong ptrace(enum __ptrace_request request,\n            pid_t pid,\n            void *addr,\n            void *data);\n```\n\n`request`参数指定了`ptrace`的行为和后面参数的用法。\n\n> `PTRACE_TRACEME`, `PTRACE_PEEKTEXT`, `PTRACE_PEEKDATA`, `PTRACE_PEEKUSER`, `PTRACE_POKETEXT`, `PTRACE_POKEDATA`, `PTRACE_POKEUSER`, `PTRACE_GETREGS`, `PTRACE_GETFPREGS`, `PTRACE_SETREGS`, `PTRACE_SETFPREGS`, `PTRACE_CONT`, `PTRACE_SYSCALL`, `PTRACE_SINGLESTEP`, `PTRACE_DETACH`\n\n\n\n**追踪正在运行的process**\n\n在上面，child使用`PTRACE_TRACEME`来获得追踪，如果我们需要追踪一个正在运行的process，我们需要使用`PTRACE_ATTACH`。\n\n<u>当`PTRACE_ATTACH`和`pid`一起使用时，约等于process调用了`PTRACE_TRACEME`并且变成了tracer的child</u>。tracee会收到`SIGSTOP`信号，我们在修改完数据之后，需要调用`PTRACE_DETACH`。\n\n`test.c`\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nint main()\n{   int i;\n    for(i = 0;i < 10; ++i) {\n        printf(\"My counter: %d\\n\", i);\n        sleep(2);\n    }\n    return 0;\n}\n```\n\n`tracer.c`\n\n```c\n#include <sys/ptrace.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <sys/user.h>   /* For user_regs_struct\n                             etc. */\n#include <sys/reg.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{   pid_t traced_process;\n    struct user_regs_struct regs;\n    long ins;\n    if(argc != 2) {\n        // printf(\"Usage: %s <pid to be traced>\\n\", argv[0], argv[1]);\n        printf(\"Usage: %s <pid to be traced>\\n\", argv[0]);\n        exit(1);\n    }\n    traced_process = atoi(argv[1]);\n    ptrace(PTRACE_ATTACH, traced_process,\n           NULL, NULL);\n    wait(NULL);\n    ptrace(PTRACE_GETREGS, traced_process,\n           NULL, &regs);\n    ins = ptrace(PTRACE_PEEKTEXT, traced_process,\n                 regs.rip, NULL);\n    printf(\"EIP: %llx Instruction executed: %lx\\n\",\n           regs.rip, ins);\n    ptrace(PTRACE_DETACH, traced_process,\n           NULL, NULL);\n    return 0;\n}\n```\n\n`tracer`会attach到test，检视它的`eip`（instruction pointer），然后detach。\n\n如果要注入代码，需要在中止tracee之后使用`PTRACE_POKETEXT`，然后`PTRACE_POKEDATA`。\n\n\n\n参考链接：\n\nhttps://www.linuxjournal.com/article/6100","source":"_posts/Linux-ptrace.md","raw":"---\ntitle: Linux ptrace\ntop: 0\ncopyright: true\ndate: 2021-12-04 21:27:52\nupdated: 2021-12-04 21:27:52\npermalink:\npassword:\ncomments:\ntags:\n- Linux\ncategories:\n- 操作系统\nkeywords:\ndescription:\n---\n\n# 简介\n\n最近的项目中需要用到`ptrace`这样的系统调用函数，这里总结一下要注意的地方。\n\n<!-- more -->\n\n## 系统调用\n\n在编写程序的时候，我们会使用编程语言提供的库函数，例如`read()`、`fork()`，这些库函数实际上是对一些底层操作的包装。这些底层操作就称为系统调用。\n\n一个系统调用包括：\n\n* 编号，用于区分\n* 参数\n* 寄存器，用于存放参数\n\n\n\n例如，`write()`会被转换成：\n\n```asm\nwrite(2, \"Hello\", 5);\n/*----------------*/\nmovl $1,%eax\t; 系统调用号\nmovl $2,%ebx\nmovl $hello,%ecx\nmovl $5,%edx\nint $0x80\t\t; 中断\n```\n\n\n\n## `ptrace`\n\n`ptrace`可以让一个进程（tracer）监视和控制另一个进程（tracee），并且可以改变内存和寄存器的内容，一般用于debug。\n\n`ptrace`起作用的时间：在执行system call之前，kernel会检查process是否被追踪。如果是的，那么kernel会中止tracee并将控制权交给追踪者。\n\n\n\n**一个例子**：\n\n```c\n#include <sys/ptrace.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <sys/user.h> // ORIG_RAX\n#include <sys/reg.h> // ORIG_RAX\n#include <stdio.h>\n\nint main() {\n    pid_t child;\n    long orig_eax;\n    child = fork();\n    if(child == 0) {\n        ptrace(PTRACE_TRACEME, 0, NULL, NULL);\n        execl(\"/bin/ls\", \"ls\", NULL);\n    }\n    else {\n        wait(NULL);\n        orig_eax = ptrace(PTRACE_PEEKUSER,\n                          child, 8 * ORIG_RAX, // 在64位的机器上，所以要乘8，如果是32位乘4\n                          NULL);\n        /* 也可以用下面的方法得到orig_eax，不需要计算register位置\n       \tstruct user_regs_struct regs;\n\t\tptrace(PTRACE_GETREGS, child, NULL, &regs);\n\t\tprintf(\"The child made a system call %ldn\", regs.orig_rax);\n        */\n        printf(\"The child made a \"\n               \"system call %ld\\n\", orig_eax);\n        ptrace(PTRACE_CONT, child, NULL, NULL);\n    }\n    return 0;\n}\n```\n\n输出是：\n\n![output](output.png)\n\n对例子的分析：\n\n在12行调用了`fork`，child会先调用`ptrace`，`flag`为`PTRACE_TRACEME`，告诉kernel它正在被追踪，于是在child执行`execve` system call时，控制权会被交给parent。\n\nparent使用`wait`等待kernel的通知。之后parent可以检视参数（读register）。\n\n当系统调用发生时，kernel会保存eax的内容，parent可以用`ptrace`的`PTRACE_PEEKUSER`参数读这个值，如19行。\n\nparent完成检视之后，以`PTRACE_CONT`参数调用`ptrace`，可以继续system call。\n\n> 运行的结果是`59`，和原网址的结果`11`不同，原因是什么？\n>\n> `asm/unistd.h`文件在i386、ILP32和64位机上的不同，`asm/unistd_64.h`中有：`#define __NR_execve 59`\n\n\n\n`ptrace`的**用法**：\n\n```c\nlong ptrace(enum __ptrace_request request,\n            pid_t pid,\n            void *addr,\n            void *data);\n```\n\n`request`参数指定了`ptrace`的行为和后面参数的用法。\n\n> `PTRACE_TRACEME`, `PTRACE_PEEKTEXT`, `PTRACE_PEEKDATA`, `PTRACE_PEEKUSER`, `PTRACE_POKETEXT`, `PTRACE_POKEDATA`, `PTRACE_POKEUSER`, `PTRACE_GETREGS`, `PTRACE_GETFPREGS`, `PTRACE_SETREGS`, `PTRACE_SETFPREGS`, `PTRACE_CONT`, `PTRACE_SYSCALL`, `PTRACE_SINGLESTEP`, `PTRACE_DETACH`\n\n\n\n**追踪正在运行的process**\n\n在上面，child使用`PTRACE_TRACEME`来获得追踪，如果我们需要追踪一个正在运行的process，我们需要使用`PTRACE_ATTACH`。\n\n<u>当`PTRACE_ATTACH`和`pid`一起使用时，约等于process调用了`PTRACE_TRACEME`并且变成了tracer的child</u>。tracee会收到`SIGSTOP`信号，我们在修改完数据之后，需要调用`PTRACE_DETACH`。\n\n`test.c`\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nint main()\n{   int i;\n    for(i = 0;i < 10; ++i) {\n        printf(\"My counter: %d\\n\", i);\n        sleep(2);\n    }\n    return 0;\n}\n```\n\n`tracer.c`\n\n```c\n#include <sys/ptrace.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <sys/user.h>   /* For user_regs_struct\n                             etc. */\n#include <sys/reg.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{   pid_t traced_process;\n    struct user_regs_struct regs;\n    long ins;\n    if(argc != 2) {\n        // printf(\"Usage: %s <pid to be traced>\\n\", argv[0], argv[1]);\n        printf(\"Usage: %s <pid to be traced>\\n\", argv[0]);\n        exit(1);\n    }\n    traced_process = atoi(argv[1]);\n    ptrace(PTRACE_ATTACH, traced_process,\n           NULL, NULL);\n    wait(NULL);\n    ptrace(PTRACE_GETREGS, traced_process,\n           NULL, &regs);\n    ins = ptrace(PTRACE_PEEKTEXT, traced_process,\n                 regs.rip, NULL);\n    printf(\"EIP: %llx Instruction executed: %lx\\n\",\n           regs.rip, ins);\n    ptrace(PTRACE_DETACH, traced_process,\n           NULL, NULL);\n    return 0;\n}\n```\n\n`tracer`会attach到test，检视它的`eip`（instruction pointer），然后detach。\n\n如果要注入代码，需要在中止tracee之后使用`PTRACE_POKETEXT`，然后`PTRACE_POKEDATA`。\n\n\n\n参考链接：\n\nhttps://www.linuxjournal.com/article/6100","slug":"Linux-ptrace","published":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsxh00017ksh260r1ozd","content":"<h1 id=\"简介\">简介</h1>\r\n<p>最近的项目中需要用到<code>ptrace</code>这样的系统调用函数，这里总结一下要注意的地方。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"系统调用\">系统调用</h2>\r\n<p>在编写程序的时候，我们会使用编程语言提供的库函数，例如<code>read()</code>、<code>fork()</code>，这些库函数实际上是对一些底层操作的包装。这些底层操作就称为系统调用。</p>\r\n<p>一个系统调用包括：</p>\r\n<ul>\r\n<li>编号，用于区分</li>\r\n<li>参数</li>\r\n<li>寄存器，用于存放参数</li>\r\n</ul>\r\n<p>例如，<code>write()</code>会被转换成：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">write(2, &quot;Hello&quot;, 5);</span><br><span class=\"line\">/*----------------*/</span><br><span class=\"line\">movl $1,%eax\t; 系统调用号</span><br><span class=\"line\">movl $2,%ebx</span><br><span class=\"line\">movl $hello,%ecx</span><br><span class=\"line\">movl $5,%edx</span><br><span class=\"line\">int $0x80\t\t; 中断</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"ptrace\"><code>ptrace</code></h2>\r\n<p><code>ptrace</code>可以让一个进程（tracer）监视和控制另一个进程（tracee），并且可以改变内存和寄存器的内容，一般用于debug。</p>\r\n<p><code>ptrace</code>起作用的时间：在执行system\r\ncall之前，kernel会检查process是否被追踪。如果是的，那么kernel会中止tracee并将控制权交给追踪者。</p>\r\n<p><strong>一个例子</strong>：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ptrace.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/user.h&gt;</span> <span class=\"comment\">// ORIG_RAX</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/reg.h&gt;</span> <span class=\"comment\">// ORIG_RAX</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> orig_eax;</span><br><span class=\"line\">    child = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(child == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ptrace(PTRACE_TRACEME, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        execl(<span class=\"string\">&quot;/bin/ls&quot;</span>, <span class=\"string\">&quot;ls&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        orig_eax = ptrace(PTRACE_PEEKUSER,</span><br><span class=\"line\">                          child, <span class=\"number\">8</span> * ORIG_RAX, <span class=\"comment\">// 在64位的机器上，所以要乘8，如果是32位乘4</span></span><br><span class=\"line\">                          <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"comment\">/* 也可以用下面的方法得到orig_eax，不需要计算register位置</span></span><br><span class=\"line\"><span class=\"comment\">       \tstruct user_regs_struct regs;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tptrace(PTRACE_GETREGS, child, NULL, &amp;regs);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprintf(&quot;The child made a system call %ldn&quot;, regs.orig_rax);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The child made a &quot;</span></span><br><span class=\"line\">               <span class=\"string\">&quot;system call %ld\\n&quot;</span>, orig_eax);</span><br><span class=\"line\">        ptrace(PTRACE_CONT, child, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>输出是：</p>\r\n<figure>\r\n<img src=\"output.png\" alt=\"output\" />\r\n<figcaption aria-hidden=\"true\">output</figcaption>\r\n</figure>\r\n<p>对例子的分析：</p>\r\n<p>在12行调用了<code>fork</code>，child会先调用<code>ptrace</code>，<code>flag</code>为<code>PTRACE_TRACEME</code>，告诉kernel它正在被追踪，于是在child执行<code>execve</code>\r\nsystem call时，控制权会被交给parent。</p>\r\n<p>parent使用<code>wait</code>等待kernel的通知。之后parent可以检视参数（读register）。</p>\r\n<p>当系统调用发生时，kernel会保存eax的内容，parent可以用<code>ptrace</code>的<code>PTRACE_PEEKUSER</code>参数读这个值，如19行。</p>\r\n<p>parent完成检视之后，以<code>PTRACE_CONT</code>参数调用<code>ptrace</code>，可以继续system\r\ncall。</p>\r\n<blockquote>\r\n<p>运行的结果是<code>59</code>，和原网址的结果<code>11</code>不同，原因是什么？</p>\r\n<p><code>asm/unistd.h</code>文件在i386、ILP32和64位机上的不同，<code>asm/unistd_64.h</code>中有：<code>#define __NR_execve 59</code></p>\r\n</blockquote>\r\n<p><code>ptrace</code>的<strong>用法</strong>：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">ptrace</span><span class=\"params\">(<span class=\"keyword\">enum</span> __ptrace_request request,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">pid_t</span> pid,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">void</span> *addr,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">void</span> *data)</span></span>;</span><br></pre></td></tr></table></figure>\r\n<p><code>request</code>参数指定了<code>ptrace</code>的行为和后面参数的用法。</p>\r\n<blockquote>\r\n<p><code>PTRACE_TRACEME</code>, <code>PTRACE_PEEKTEXT</code>,\r\n<code>PTRACE_PEEKDATA</code>, <code>PTRACE_PEEKUSER</code>,\r\n<code>PTRACE_POKETEXT</code>, <code>PTRACE_POKEDATA</code>,\r\n<code>PTRACE_POKEUSER</code>, <code>PTRACE_GETREGS</code>,\r\n<code>PTRACE_GETFPREGS</code>, <code>PTRACE_SETREGS</code>,\r\n<code>PTRACE_SETFPREGS</code>, <code>PTRACE_CONT</code>,\r\n<code>PTRACE_SYSCALL</code>, <code>PTRACE_SINGLESTEP</code>,\r\n<code>PTRACE_DETACH</code></p>\r\n</blockquote>\r\n<p><strong>追踪正在运行的process</strong></p>\r\n<p>在上面，child使用<code>PTRACE_TRACEME</code>来获得追踪，如果我们需要追踪一个正在运行的process，我们需要使用<code>PTRACE_ATTACH</code>。</p>\r\n<p><u>当<code>PTRACE_ATTACH</code>和<code>pid</code>一起使用时，约等于process调用了<code>PTRACE_TRACEME</code>并且变成了tracer的child</u>。tracee会收到<code>SIGSTOP</code>信号，我们在修改完数据之后，需要调用<code>PTRACE_DETACH</code>。</p>\r\n<p><code>test.c</code></p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My counter: %d\\n&quot;</span>, i);</span><br><span class=\"line\">        sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>tracer.c</code></p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ptrace.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/user.h&gt;</span>   <span class=\"comment\">/* For user_regs_struct</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">                             etc. */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/reg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   <span class=\"keyword\">pid_t</span> traced_process;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">user_regs_struct</span> <span class=\"title\">regs</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> ins;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;Usage: %s &lt;pid to be traced&gt;\\n&quot;, argv[0], argv[1]);</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: %s &lt;pid to be traced&gt;\\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    traced_process = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    ptrace(PTRACE_ATTACH, traced_process,</span><br><span class=\"line\">           <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    ptrace(PTRACE_GETREGS, traced_process,</span><br><span class=\"line\">           <span class=\"literal\">NULL</span>, &amp;regs);</span><br><span class=\"line\">    ins = ptrace(PTRACE_PEEKTEXT, traced_process,</span><br><span class=\"line\">                 regs.rip, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;EIP: %llx Instruction executed: %lx\\n&quot;</span>,</span><br><span class=\"line\">           regs.rip, ins);</span><br><span class=\"line\">    ptrace(PTRACE_DETACH, traced_process,</span><br><span class=\"line\">           <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>tracer</code>会attach到test，检视它的<code>eip</code>（instruction\r\npointer），然后detach。</p>\r\n<p>如果要注入代码，需要在中止tracee之后使用<code>PTRACE_POKETEXT</code>，然后<code>PTRACE_POKEDATA</code>。</p>\r\n<p>参考链接：</p>\r\n<p>https://www.linuxjournal.com/article/6100</p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\">简介</h1>\r\n<p>最近的项目中需要用到<code>ptrace</code>这样的系统调用函数，这里总结一下要注意的地方。</p>","more":"<h2 id=\"系统调用\">系统调用</h2>\r\n<p>在编写程序的时候，我们会使用编程语言提供的库函数，例如<code>read()</code>、<code>fork()</code>，这些库函数实际上是对一些底层操作的包装。这些底层操作就称为系统调用。</p>\r\n<p>一个系统调用包括：</p>\r\n<ul>\r\n<li>编号，用于区分</li>\r\n<li>参数</li>\r\n<li>寄存器，用于存放参数</li>\r\n</ul>\r\n<p>例如，<code>write()</code>会被转换成：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">write(2, &quot;Hello&quot;, 5);</span><br><span class=\"line\">/*----------------*/</span><br><span class=\"line\">movl $1,%eax\t; 系统调用号</span><br><span class=\"line\">movl $2,%ebx</span><br><span class=\"line\">movl $hello,%ecx</span><br><span class=\"line\">movl $5,%edx</span><br><span class=\"line\">int $0x80\t\t; 中断</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"ptrace\"><code>ptrace</code></h2>\r\n<p><code>ptrace</code>可以让一个进程（tracer）监视和控制另一个进程（tracee），并且可以改变内存和寄存器的内容，一般用于debug。</p>\r\n<p><code>ptrace</code>起作用的时间：在执行system\r\ncall之前，kernel会检查process是否被追踪。如果是的，那么kernel会中止tracee并将控制权交给追踪者。</p>\r\n<p><strong>一个例子</strong>：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ptrace.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/user.h&gt;</span> <span class=\"comment\">// ORIG_RAX</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/reg.h&gt;</span> <span class=\"comment\">// ORIG_RAX</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> orig_eax;</span><br><span class=\"line\">    child = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(child == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ptrace(PTRACE_TRACEME, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        execl(<span class=\"string\">&quot;/bin/ls&quot;</span>, <span class=\"string\">&quot;ls&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        orig_eax = ptrace(PTRACE_PEEKUSER,</span><br><span class=\"line\">                          child, <span class=\"number\">8</span> * ORIG_RAX, <span class=\"comment\">// 在64位的机器上，所以要乘8，如果是32位乘4</span></span><br><span class=\"line\">                          <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"comment\">/* 也可以用下面的方法得到orig_eax，不需要计算register位置</span></span><br><span class=\"line\"><span class=\"comment\">       \tstruct user_regs_struct regs;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tptrace(PTRACE_GETREGS, child, NULL, &amp;regs);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprintf(&quot;The child made a system call %ldn&quot;, regs.orig_rax);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The child made a &quot;</span></span><br><span class=\"line\">               <span class=\"string\">&quot;system call %ld\\n&quot;</span>, orig_eax);</span><br><span class=\"line\">        ptrace(PTRACE_CONT, child, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>输出是：</p>\r\n<figure>\r\n<img src=\"output.png\" alt=\"output\" />\r\n<figcaption aria-hidden=\"true\">output</figcaption>\r\n</figure>\r\n<p>对例子的分析：</p>\r\n<p>在12行调用了<code>fork</code>，child会先调用<code>ptrace</code>，<code>flag</code>为<code>PTRACE_TRACEME</code>，告诉kernel它正在被追踪，于是在child执行<code>execve</code>\r\nsystem call时，控制权会被交给parent。</p>\r\n<p>parent使用<code>wait</code>等待kernel的通知。之后parent可以检视参数（读register）。</p>\r\n<p>当系统调用发生时，kernel会保存eax的内容，parent可以用<code>ptrace</code>的<code>PTRACE_PEEKUSER</code>参数读这个值，如19行。</p>\r\n<p>parent完成检视之后，以<code>PTRACE_CONT</code>参数调用<code>ptrace</code>，可以继续system\r\ncall。</p>\r\n<blockquote>\r\n<p>运行的结果是<code>59</code>，和原网址的结果<code>11</code>不同，原因是什么？</p>\r\n<p><code>asm/unistd.h</code>文件在i386、ILP32和64位机上的不同，<code>asm/unistd_64.h</code>中有：<code>#define __NR_execve 59</code></p>\r\n</blockquote>\r\n<p><code>ptrace</code>的<strong>用法</strong>：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">ptrace</span><span class=\"params\">(<span class=\"keyword\">enum</span> __ptrace_request request,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">pid_t</span> pid,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">void</span> *addr,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">void</span> *data)</span></span>;</span><br></pre></td></tr></table></figure>\r\n<p><code>request</code>参数指定了<code>ptrace</code>的行为和后面参数的用法。</p>\r\n<blockquote>\r\n<p><code>PTRACE_TRACEME</code>, <code>PTRACE_PEEKTEXT</code>,\r\n<code>PTRACE_PEEKDATA</code>, <code>PTRACE_PEEKUSER</code>,\r\n<code>PTRACE_POKETEXT</code>, <code>PTRACE_POKEDATA</code>,\r\n<code>PTRACE_POKEUSER</code>, <code>PTRACE_GETREGS</code>,\r\n<code>PTRACE_GETFPREGS</code>, <code>PTRACE_SETREGS</code>,\r\n<code>PTRACE_SETFPREGS</code>, <code>PTRACE_CONT</code>,\r\n<code>PTRACE_SYSCALL</code>, <code>PTRACE_SINGLESTEP</code>,\r\n<code>PTRACE_DETACH</code></p>\r\n</blockquote>\r\n<p><strong>追踪正在运行的process</strong></p>\r\n<p>在上面，child使用<code>PTRACE_TRACEME</code>来获得追踪，如果我们需要追踪一个正在运行的process，我们需要使用<code>PTRACE_ATTACH</code>。</p>\r\n<p><u>当<code>PTRACE_ATTACH</code>和<code>pid</code>一起使用时，约等于process调用了<code>PTRACE_TRACEME</code>并且变成了tracer的child</u>。tracee会收到<code>SIGSTOP</code>信号，我们在修改完数据之后，需要调用<code>PTRACE_DETACH</code>。</p>\r\n<p><code>test.c</code></p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My counter: %d\\n&quot;</span>, i);</span><br><span class=\"line\">        sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>tracer.c</code></p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ptrace.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/user.h&gt;</span>   <span class=\"comment\">/* For user_regs_struct</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">                             etc. */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/reg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   <span class=\"keyword\">pid_t</span> traced_process;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">user_regs_struct</span> <span class=\"title\">regs</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> ins;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;Usage: %s &lt;pid to be traced&gt;\\n&quot;, argv[0], argv[1]);</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: %s &lt;pid to be traced&gt;\\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    traced_process = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    ptrace(PTRACE_ATTACH, traced_process,</span><br><span class=\"line\">           <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    ptrace(PTRACE_GETREGS, traced_process,</span><br><span class=\"line\">           <span class=\"literal\">NULL</span>, &amp;regs);</span><br><span class=\"line\">    ins = ptrace(PTRACE_PEEKTEXT, traced_process,</span><br><span class=\"line\">                 regs.rip, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;EIP: %llx Instruction executed: %lx\\n&quot;</span>,</span><br><span class=\"line\">           regs.rip, ins);</span><br><span class=\"line\">    ptrace(PTRACE_DETACH, traced_process,</span><br><span class=\"line\">           <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>tracer</code>会attach到test，检视它的<code>eip</code>（instruction\r\npointer），然后detach。</p>\r\n<p>如果要注入代码，需要在中止tracee之后使用<code>PTRACE_POKETEXT</code>，然后<code>PTRACE_POKEDATA</code>。</p>\r\n<p>参考链接：</p>\r\n<p>https://www.linuxjournal.com/article/6100</p>"},{"title":"博客更新日志","date":"2021-11-13T11:01:47.000Z","_content":"\n# 博客更新日志\n\n这里是记录博客更新的日志，包括和博客建设相关的`md`、为博客增加的功能。\n\n<!-- more -->\n\nTODOs：\n\n* 有新评论时邮件通知\n\n\n\n2023.05.14：\n\n* 支持 LaTeX 显示\n\n2023.05.13：\n\n* 增加导航栏选项\n* 增加 Valine 评论\n* 修改网站运行信息显示\n\n2021.11.24：\n\n* 博文只显示简介\n* 显示博文统计数据、显示咕咕天数🕊️\n\n2021.11.12：\n\n* 创建博客\n* 设置`NexT`主题\n* 上传了第一篇博客\n\n","source":"_posts/blog-update-log.md","raw":"---\ntitle: 博客更新日志\ndate: 2021-11-13 19:01:47\ncategories:\n- Blog\n---\n\n# 博客更新日志\n\n这里是记录博客更新的日志，包括和博客建设相关的`md`、为博客增加的功能。\n\n<!-- more -->\n\nTODOs：\n\n* 有新评论时邮件通知\n\n\n\n2023.05.14：\n\n* 支持 LaTeX 显示\n\n2023.05.13：\n\n* 增加导航栏选项\n* 增加 Valine 评论\n* 修改网站运行信息显示\n\n2021.11.24：\n\n* 博文只显示简介\n* 显示博文统计数据、显示咕咕天数🕊️\n\n2021.11.12：\n\n* 创建博客\n* 设置`NexT`主题\n* 上传了第一篇博客\n\n","slug":"blog-update-log","published":1,"updated":"2023-05-14T07:20:35.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsxn00037kshh8etbuue","content":"<h1 id=\"博客更新日志\">博客更新日志</h1>\r\n<p>这里是记录博客更新的日志，包括和博客建设相关的<code>md</code>、为博客增加的功能。</p>\r\n<span id=\"more\"></span>\r\n<p>TODOs：</p>\r\n<ul>\r\n<li>有新评论时邮件通知</li>\r\n</ul>\r\n<p>2023.05.14：</p>\r\n<ul>\r\n<li>支持 LaTeX 显示</li>\r\n</ul>\r\n<p>2023.05.13：</p>\r\n<ul>\r\n<li>增加导航栏选项</li>\r\n<li>增加 Valine 评论</li>\r\n<li>修改网站运行信息显示</li>\r\n</ul>\r\n<p>2021.11.24：</p>\r\n<ul>\r\n<li>博文只显示简介</li>\r\n<li>显示博文统计数据、显示咕咕天数🕊️</li>\r\n</ul>\r\n<p>2021.11.12：</p>\r\n<ul>\r\n<li>创建博客</li>\r\n<li>设置<code>NexT</code>主题</li>\r\n<li>上传了第一篇博客</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"博客更新日志\">博客更新日志</h1>\r\n<p>这里是记录博客更新的日志，包括和博客建设相关的<code>md</code>、为博客增加的功能。</p>","more":"<p>TODOs：</p>\r\n<ul>\r\n<li>有新评论时邮件通知</li>\r\n</ul>\r\n<p>2023.05.14：</p>\r\n<ul>\r\n<li>支持 LaTeX 显示</li>\r\n</ul>\r\n<p>2023.05.13：</p>\r\n<ul>\r\n<li>增加导航栏选项</li>\r\n<li>增加 Valine 评论</li>\r\n<li>修改网站运行信息显示</li>\r\n</ul>\r\n<p>2021.11.24：</p>\r\n<ul>\r\n<li>博文只显示简介</li>\r\n<li>显示博文统计数据、显示咕咕天数🕊️</li>\r\n</ul>\r\n<p>2021.11.12：</p>\r\n<ul>\r\n<li>创建博客</li>\r\n<li>设置<code>NexT</code>主题</li>\r\n<li>上传了第一篇博客</li>\r\n</ul>"},{"title":"Elasticsearch 使用记录","copyright":true,"date":"2023-05-26T07:53:26.000Z","updated":"2023-05-26T07:53:26.000Z","description":null,"_content":"\n\n\n## 0x00 简介\n\n本文介绍了 ES 在实践上的一些内容，包括：\n\n* ES 中的概念\n* 高可用的 ES 集群\n* ES 调优的设置项\n\n<!-- more -->\n\n## 0x01 一些名词\n\n首先介绍一些 ES 中的概念：\n\n* Index：ES index 就是一组 shard，这些 shard 分布在多个 node 上，每个 shared 都是一个 self-contained index\n* shard：有两种类型，primary 和 replica。replica 可以做备份和查询。primary 的数量在创建索引就确定了，但是 replica 可以在后续调整\n\n\n\n## 0x02 高可用\n\n高可用的 ES 集群有三个方面：\n\n* 一个集群内部，可能有节点挂了\n* 多个集群，涉及集群之间的复制，follower cluster 可以作为 failover，或者就近提供服务的 geo-replica\n* 定期的 snapshot\n\n一个可靠的 ES 集群需要有：\n\n* 至少三个 master 备选的 node\n* 每个 role 至少有两个节点\n* 每个 shard 至少有两个 copy，primary 和 replica\n\n在剩余的节点上，ES 会自动重建 failed shard，让 health 回到 green。如果要让单节点的 ES 集群健康状态变为 green，需要将 index 的 `index.number_of_replicas`设置为`0`\n\n\n\n## 0x03 性能调优\n\n**shard**\n\n要考虑的配置项：primary shard 数量，shard size\n\n* 对于时序类的数据，shard size 一般在 20-40 GB\n* 一个 node 可以管理的 shard 数和堆大小有关，1 GB heap 对应 20 个 shard\n\n参考：https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size","source":"_posts/elasticsearch-usage.md","raw":"---\ntitle: Elasticsearch 使用记录\ntags: [Elasticsearch]\ncopyright: true\ndate: 2023-05-26 15:53:26\nupdated: 2023-05-26 15:53:26\npermalink:\ncategories: [搜索引擎]\ndescription:\n---\n\n\n\n## 0x00 简介\n\n本文介绍了 ES 在实践上的一些内容，包括：\n\n* ES 中的概念\n* 高可用的 ES 集群\n* ES 调优的设置项\n\n<!-- more -->\n\n## 0x01 一些名词\n\n首先介绍一些 ES 中的概念：\n\n* Index：ES index 就是一组 shard，这些 shard 分布在多个 node 上，每个 shared 都是一个 self-contained index\n* shard：有两种类型，primary 和 replica。replica 可以做备份和查询。primary 的数量在创建索引就确定了，但是 replica 可以在后续调整\n\n\n\n## 0x02 高可用\n\n高可用的 ES 集群有三个方面：\n\n* 一个集群内部，可能有节点挂了\n* 多个集群，涉及集群之间的复制，follower cluster 可以作为 failover，或者就近提供服务的 geo-replica\n* 定期的 snapshot\n\n一个可靠的 ES 集群需要有：\n\n* 至少三个 master 备选的 node\n* 每个 role 至少有两个节点\n* 每个 shard 至少有两个 copy，primary 和 replica\n\n在剩余的节点上，ES 会自动重建 failed shard，让 health 回到 green。如果要让单节点的 ES 集群健康状态变为 green，需要将 index 的 `index.number_of_replicas`设置为`0`\n\n\n\n## 0x03 性能调优\n\n**shard**\n\n要考虑的配置项：primary shard 数量，shard size\n\n* 对于时序类的数据，shard size 一般在 20-40 GB\n* 一个 node 可以管理的 shard 数和堆大小有关，1 GB heap 对应 20 个 shard\n\n参考：https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size","slug":"elasticsearch-usage","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsxv00067ksh8iut39uk","content":"<h2 id=\"x00-简介\">0x00 简介</h2>\r\n<p>本文介绍了 ES 在实践上的一些内容，包括：</p>\r\n<ul>\r\n<li>ES 中的概念</li>\r\n<li>高可用的 ES 集群</li>\r\n<li>ES 调优的设置项</li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n<h2 id=\"x01-一些名词\">0x01 一些名词</h2>\r\n<p>首先介绍一些 ES 中的概念：</p>\r\n<ul>\r\n<li>Index：ES index 就是一组 shard，这些 shard 分布在多个 node 上，每个\r\nshared 都是一个 self-contained index</li>\r\n<li>shard：有两种类型，primary 和 replica。replica\r\n可以做备份和查询。primary 的数量在创建索引就确定了，但是 replica\r\n可以在后续调整</li>\r\n</ul>\r\n<h2 id=\"x02-高可用\">0x02 高可用</h2>\r\n<p>高可用的 ES 集群有三个方面：</p>\r\n<ul>\r\n<li>一个集群内部，可能有节点挂了</li>\r\n<li>多个集群，涉及集群之间的复制，follower cluster 可以作为\r\nfailover，或者就近提供服务的 geo-replica</li>\r\n<li>定期的 snapshot</li>\r\n</ul>\r\n<p>一个可靠的 ES 集群需要有：</p>\r\n<ul>\r\n<li>至少三个 master 备选的 node</li>\r\n<li>每个 role 至少有两个节点</li>\r\n<li>每个 shard 至少有两个 copy，primary 和 replica</li>\r\n</ul>\r\n<p>在剩余的节点上，ES 会自动重建 failed shard，让 health 回到\r\ngreen。如果要让单节点的 ES 集群健康状态变为 green，需要将 index 的\r\n<code>index.number_of_replicas</code>设置为<code>0</code></p>\r\n<h2 id=\"x03-性能调优\">0x03 性能调优</h2>\r\n<p><strong>shard</strong></p>\r\n<p>要考虑的配置项：primary shard 数量，shard size</p>\r\n<ul>\r\n<li>对于时序类的数据，shard size 一般在 20-40 GB</li>\r\n<li>一个 node 可以管理的 shard 数和堆大小有关，1 GB heap 对应 20 个\r\nshard</li>\r\n</ul>\r\n<p>参考：https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size</p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"x00-简介\">0x00 简介</h2>\r\n<p>本文介绍了 ES 在实践上的一些内容，包括：</p>\r\n<ul>\r\n<li>ES 中的概念</li>\r\n<li>高可用的 ES 集群</li>\r\n<li>ES 调优的设置项</li>\r\n</ul>","more":"<h2 id=\"x01-一些名词\">0x01 一些名词</h2>\r\n<p>首先介绍一些 ES 中的概念：</p>\r\n<ul>\r\n<li>Index：ES index 就是一组 shard，这些 shard 分布在多个 node 上，每个\r\nshared 都是一个 self-contained index</li>\r\n<li>shard：有两种类型，primary 和 replica。replica\r\n可以做备份和查询。primary 的数量在创建索引就确定了，但是 replica\r\n可以在后续调整</li>\r\n</ul>\r\n<h2 id=\"x02-高可用\">0x02 高可用</h2>\r\n<p>高可用的 ES 集群有三个方面：</p>\r\n<ul>\r\n<li>一个集群内部，可能有节点挂了</li>\r\n<li>多个集群，涉及集群之间的复制，follower cluster 可以作为\r\nfailover，或者就近提供服务的 geo-replica</li>\r\n<li>定期的 snapshot</li>\r\n</ul>\r\n<p>一个可靠的 ES 集群需要有：</p>\r\n<ul>\r\n<li>至少三个 master 备选的 node</li>\r\n<li>每个 role 至少有两个节点</li>\r\n<li>每个 shard 至少有两个 copy，primary 和 replica</li>\r\n</ul>\r\n<p>在剩余的节点上，ES 会自动重建 failed shard，让 health 回到\r\ngreen。如果要让单节点的 ES 集群健康状态变为 green，需要将 index 的\r\n<code>index.number_of_replicas</code>设置为<code>0</code></p>\r\n<h2 id=\"x03-性能调优\">0x03 性能调优</h2>\r\n<p><strong>shard</strong></p>\r\n<p>要考虑的配置项：primary shard 数量，shard size</p>\r\n<ul>\r\n<li>对于时序类的数据，shard size 一般在 20-40 GB</li>\r\n<li>一个 node 可以管理的 shard 数和堆大小有关，1 GB heap 对应 20 个\r\nshard</li>\r\n</ul>\r\n<p>参考：https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size</p>"},{"title":"Elasticsearch 101","copyright":true,"date":"2023-05-25T09:03:11.000Z","updated":"2023-05-25T09:03:11.000Z","description":null,"_content":"\n\n\n## 0x00 简介\n\nElasticsearch 是一个分布式的全文搜索引擎，可以近乎实时地存储、检索数据。ES 的底层基于 Lucene 全文信息检索工具包，另一个搜索系统 Solr 也是基于 Lucene 开发的。\n\n* 倒排索引\n* ES 对存储使用的优化\n* ES 和 MySQL 的比较\n\n<!-- more -->\n\n## 0x01 ES 101\n\n**倒排索引**\n\n在谷歌等搜索引擎中，一种常见的搜索方式是根据关键词返回相关的文档，即`word => doc`。`doc => word`这种查询的索引被称为正向索引（forward index），那么`word => doc`这种查询的索引就叫做倒排索引（反向索引，inverted index）了。\n\n```\nDICTIONARY     =====>     DOC\nada\t\t\t\t\t\t [1,2,3]\nbob                      [2]\n```\n\n\n\n**ES 的 Dictionary 优化**\n\n除了保存最基本的`word => doc`的映射，为了加速`word`这一层的查询，Lucene 在`Dictionary`的左边加了一层“字典树”，通过字典树可以定位单词的块，再在块中用二分查找得到单词的位置。\n\n> 引入字典树是为了在不把字典全部缓存到内存的前提下，也能加速查询单词\n>\n> 除了字典树，ES 还引入了FST（有限状态转换器，Finite State Transducers）来减少内存占用\n\n\n\n**ES 的 Posting list 优化**\n\nES 最右边的一层 DOC，虽然只是一些文档 ID 数组，但是 ES 也在这里做了优化，优化的目标有：\n\n* 节省磁盘空间\n* 快速求交集、并集\n\n节省磁盘空间：\n\n* 存储 DOC ID 的增量 + 分块：从存储原始的文档列表，变成存储文档 ID 的增量，比如：\n\n  ```\n  [73, 300, 302, 332, 343, 372] =>\n  [73, 227, 2, 30, 11, 29]\n  ```\n\n  因为 Lucene 是用 segment 存储数据的（最多存 65536 个 ID），每个 segment 被分成块，每个块最多存 256 个 ID，这样用增量存储后，可以用更少位数存数据\n\n* 按需分配空间：在上面分块的基础上，检查每个块的最大值需要分配多少位，达到按需分配。比如`227`就需要8 位，`30`就需要 5 位\n\n快速求交并集：\n\n使用 bitmap，用位运算\n\n\n\n**为什么 ES 不使用 B+ 树存储？**\n\nB+ 树主要设计目的是减少搜索时访问磁盘的次数，而 Lucene 等搜索引擎设计的时候，追求的目标是倒排压缩率&倒排解压速度&倒排 Bool 运算速度。取倒排到内存运算的时候，是连续读取，时间开销和倒排的大小有关系，所以并不适合用 B+ 数。\n同理 MySQL 等数据库使用索引的目的是快速定位某一行数据，若使用倒排这种线性化的数据结构存储数据，其查找的时候访问磁盘的次数会远大于使用 B+ 的数据库。\n\n\n\n## 0x02 Sequel\n\n后面可能从 ES 的使用方面再写一篇 post，介绍 ES 的索引、映射、分片、备份相关的","source":"_posts/elasticsearch.md","raw":"---\ntitle: Elasticsearch 101\ntags: [Elasticsearch]\ncopyright: true\ndate: 2023-05-25 17:03:11\nupdated: 2023-05-25 17:03:11\npermalink:\ncategories: [搜索引擎]\ndescription:\n---\n\n\n\n## 0x00 简介\n\nElasticsearch 是一个分布式的全文搜索引擎，可以近乎实时地存储、检索数据。ES 的底层基于 Lucene 全文信息检索工具包，另一个搜索系统 Solr 也是基于 Lucene 开发的。\n\n* 倒排索引\n* ES 对存储使用的优化\n* ES 和 MySQL 的比较\n\n<!-- more -->\n\n## 0x01 ES 101\n\n**倒排索引**\n\n在谷歌等搜索引擎中，一种常见的搜索方式是根据关键词返回相关的文档，即`word => doc`。`doc => word`这种查询的索引被称为正向索引（forward index），那么`word => doc`这种查询的索引就叫做倒排索引（反向索引，inverted index）了。\n\n```\nDICTIONARY     =====>     DOC\nada\t\t\t\t\t\t [1,2,3]\nbob                      [2]\n```\n\n\n\n**ES 的 Dictionary 优化**\n\n除了保存最基本的`word => doc`的映射，为了加速`word`这一层的查询，Lucene 在`Dictionary`的左边加了一层“字典树”，通过字典树可以定位单词的块，再在块中用二分查找得到单词的位置。\n\n> 引入字典树是为了在不把字典全部缓存到内存的前提下，也能加速查询单词\n>\n> 除了字典树，ES 还引入了FST（有限状态转换器，Finite State Transducers）来减少内存占用\n\n\n\n**ES 的 Posting list 优化**\n\nES 最右边的一层 DOC，虽然只是一些文档 ID 数组，但是 ES 也在这里做了优化，优化的目标有：\n\n* 节省磁盘空间\n* 快速求交集、并集\n\n节省磁盘空间：\n\n* 存储 DOC ID 的增量 + 分块：从存储原始的文档列表，变成存储文档 ID 的增量，比如：\n\n  ```\n  [73, 300, 302, 332, 343, 372] =>\n  [73, 227, 2, 30, 11, 29]\n  ```\n\n  因为 Lucene 是用 segment 存储数据的（最多存 65536 个 ID），每个 segment 被分成块，每个块最多存 256 个 ID，这样用增量存储后，可以用更少位数存数据\n\n* 按需分配空间：在上面分块的基础上，检查每个块的最大值需要分配多少位，达到按需分配。比如`227`就需要8 位，`30`就需要 5 位\n\n快速求交并集：\n\n使用 bitmap，用位运算\n\n\n\n**为什么 ES 不使用 B+ 树存储？**\n\nB+ 树主要设计目的是减少搜索时访问磁盘的次数，而 Lucene 等搜索引擎设计的时候，追求的目标是倒排压缩率&倒排解压速度&倒排 Bool 运算速度。取倒排到内存运算的时候，是连续读取，时间开销和倒排的大小有关系，所以并不适合用 B+ 数。\n同理 MySQL 等数据库使用索引的目的是快速定位某一行数据，若使用倒排这种线性化的数据结构存储数据，其查找的时候访问磁盘的次数会远大于使用 B+ 的数据库。\n\n\n\n## 0x02 Sequel\n\n后面可能从 ES 的使用方面再写一篇 post，介绍 ES 的索引、映射、分片、备份相关的","slug":"elasticsearch","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsxx00077ksh50op8wwn","content":"<h2 id=\"x00-简介\">0x00 简介</h2>\r\n<p>Elasticsearch\r\n是一个分布式的全文搜索引擎，可以近乎实时地存储、检索数据。ES 的底层基于\r\nLucene 全文信息检索工具包，另一个搜索系统 Solr 也是基于 Lucene\r\n开发的。</p>\r\n<ul>\r\n<li>倒排索引</li>\r\n<li>ES 对存储使用的优化</li>\r\n<li>ES 和 MySQL 的比较</li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n<h2 id=\"x01-es-101\">0x01 ES 101</h2>\r\n<p><strong>倒排索引</strong></p>\r\n<p>在谷歌等搜索引擎中，一种常见的搜索方式是根据关键词返回相关的文档，即<code>word =&gt; doc</code>。<code>doc =&gt; word</code>这种查询的索引被称为正向索引（forward\r\nindex），那么<code>word =&gt; doc</code>这种查询的索引就叫做倒排索引（反向索引，inverted\r\nindex）了。</p>\r\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">DICTIONARY</span>     =====&gt;     DOC</span><br><span class=\"line\"><span class=\"attribute\">ada</span>\t\t\t\t\t\t<span class=\"meta\"> [1,2,3]</span></span><br><span class=\"line\"><span class=\"attribute\">bob</span>                     <span class=\"meta\"> [2]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>ES 的 Dictionary 优化</strong></p>\r\n<p>除了保存最基本的<code>word =&gt; doc</code>的映射，为了加速<code>word</code>这一层的查询，Lucene\r\n在<code>Dictionary</code>的左边加了一层“字典树”，通过字典树可以定位单词的块，再在块中用二分查找得到单词的位置。</p>\r\n<blockquote>\r\n<p>引入字典树是为了在不把字典全部缓存到内存的前提下，也能加速查询单词</p>\r\n<p>除了字典树，ES 还引入了FST（有限状态转换器，Finite State\r\nTransducers）来减少内存占用</p>\r\n</blockquote>\r\n<p><strong>ES 的 Posting list 优化</strong></p>\r\n<p>ES 最右边的一层 DOC，虽然只是一些文档 ID 数组，但是 ES\r\n也在这里做了优化，优化的目标有：</p>\r\n<ul>\r\n<li>节省磁盘空间</li>\r\n<li>快速求交集、并集</li>\r\n</ul>\r\n<p>节省磁盘空间：</p>\r\n<ul>\r\n<li><p>存储 DOC ID 的增量 + 分块：从存储原始的文档列表，变成存储文档 ID\r\n的增量，比如：</p>\r\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[73, 300, 302, 332, 343, 372]</span> =&gt;</span><br><span class=\"line\"><span class=\"string\">[73, 227, 2, 30, 11, 29]</span></span><br></pre></td></tr></table></figure>\r\n<p>因为 Lucene 是用 segment 存储数据的（最多存 65536 个 ID），每个\r\nsegment 被分成块，每个块最多存 256 个\r\nID，这样用增量存储后，可以用更少位数存数据</p></li>\r\n<li><p>按需分配空间：在上面分块的基础上，检查每个块的最大值需要分配多少位，达到按需分配。比如<code>227</code>就需要8\r\n位，<code>30</code>就需要 5 位</p></li>\r\n</ul>\r\n<p>快速求交并集：</p>\r\n<p>使用 bitmap，用位运算</p>\r\n<p><strong>为什么 ES 不使用 B+ 树存储？</strong></p>\r\n<p>B+ 树主要设计目的是减少搜索时访问磁盘的次数，而 Lucene\r\n等搜索引擎设计的时候，追求的目标是倒排压缩率&amp;倒排解压速度&amp;倒排\r\nBool\r\n运算速度。取倒排到内存运算的时候，是连续读取，时间开销和倒排的大小有关系，所以并不适合用\r\nB+ 数。 同理 MySQL\r\n等数据库使用索引的目的是快速定位某一行数据，若使用倒排这种线性化的数据结构存储数据，其查找的时候访问磁盘的次数会远大于使用\r\nB+ 的数据库。</p>\r\n<h2 id=\"x02-sequel\">0x02 Sequel</h2>\r\n<p>后面可能从 ES 的使用方面再写一篇 post，介绍 ES\r\n的索引、映射、分片、备份相关的</p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"x00-简介\">0x00 简介</h2>\r\n<p>Elasticsearch\r\n是一个分布式的全文搜索引擎，可以近乎实时地存储、检索数据。ES 的底层基于\r\nLucene 全文信息检索工具包，另一个搜索系统 Solr 也是基于 Lucene\r\n开发的。</p>\r\n<ul>\r\n<li>倒排索引</li>\r\n<li>ES 对存储使用的优化</li>\r\n<li>ES 和 MySQL 的比较</li>\r\n</ul>","more":"<h2 id=\"x01-es-101\">0x01 ES 101</h2>\r\n<p><strong>倒排索引</strong></p>\r\n<p>在谷歌等搜索引擎中，一种常见的搜索方式是根据关键词返回相关的文档，即<code>word =&gt; doc</code>。<code>doc =&gt; word</code>这种查询的索引被称为正向索引（forward\r\nindex），那么<code>word =&gt; doc</code>这种查询的索引就叫做倒排索引（反向索引，inverted\r\nindex）了。</p>\r\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">DICTIONARY</span>     =====&gt;     DOC</span><br><span class=\"line\"><span class=\"attribute\">ada</span>\t\t\t\t\t\t<span class=\"meta\"> [1,2,3]</span></span><br><span class=\"line\"><span class=\"attribute\">bob</span>                     <span class=\"meta\"> [2]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>ES 的 Dictionary 优化</strong></p>\r\n<p>除了保存最基本的<code>word =&gt; doc</code>的映射，为了加速<code>word</code>这一层的查询，Lucene\r\n在<code>Dictionary</code>的左边加了一层“字典树”，通过字典树可以定位单词的块，再在块中用二分查找得到单词的位置。</p>\r\n<blockquote>\r\n<p>引入字典树是为了在不把字典全部缓存到内存的前提下，也能加速查询单词</p>\r\n<p>除了字典树，ES 还引入了FST（有限状态转换器，Finite State\r\nTransducers）来减少内存占用</p>\r\n</blockquote>\r\n<p><strong>ES 的 Posting list 优化</strong></p>\r\n<p>ES 最右边的一层 DOC，虽然只是一些文档 ID 数组，但是 ES\r\n也在这里做了优化，优化的目标有：</p>\r\n<ul>\r\n<li>节省磁盘空间</li>\r\n<li>快速求交集、并集</li>\r\n</ul>\r\n<p>节省磁盘空间：</p>\r\n<ul>\r\n<li><p>存储 DOC ID 的增量 + 分块：从存储原始的文档列表，变成存储文档 ID\r\n的增量，比如：</p>\r\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[73, 300, 302, 332, 343, 372]</span> =&gt;</span><br><span class=\"line\"><span class=\"string\">[73, 227, 2, 30, 11, 29]</span></span><br></pre></td></tr></table></figure>\r\n<p>因为 Lucene 是用 segment 存储数据的（最多存 65536 个 ID），每个\r\nsegment 被分成块，每个块最多存 256 个\r\nID，这样用增量存储后，可以用更少位数存数据</p></li>\r\n<li><p>按需分配空间：在上面分块的基础上，检查每个块的最大值需要分配多少位，达到按需分配。比如<code>227</code>就需要8\r\n位，<code>30</code>就需要 5 位</p></li>\r\n</ul>\r\n<p>快速求交并集：</p>\r\n<p>使用 bitmap，用位运算</p>\r\n<p><strong>为什么 ES 不使用 B+ 树存储？</strong></p>\r\n<p>B+ 树主要设计目的是减少搜索时访问磁盘的次数，而 Lucene\r\n等搜索引擎设计的时候，追求的目标是倒排压缩率&amp;倒排解压速度&amp;倒排\r\nBool\r\n运算速度。取倒排到内存运算的时候，是连续读取，时间开销和倒排的大小有关系，所以并不适合用\r\nB+ 数。 同理 MySQL\r\n等数据库使用索引的目的是快速定位某一行数据，若使用倒排这种线性化的数据结构存储数据，其查找的时候访问磁盘的次数会远大于使用\r\nB+ 的数据库。</p>\r\n<h2 id=\"x02-sequel\">0x02 Sequel</h2>\r\n<p>后面可能从 ES 的使用方面再写一篇 post，介绍 ES\r\n的索引、映射、分片、备份相关的</p>"},{"title":"my first blog","date":"2021-11-12T13:54:17.000Z","_content":"\nHELLO WORLD\n\n<!-- more -->","source":"_posts/helloworld.md","raw":"---\ntitle: my first blog\ndate: 2021-11-12 21:54:17\ntags: \ncategories: \n- 随笔\n---\n\nHELLO WORLD\n\n<!-- more -->","slug":"helloworld","published":1,"updated":"2023-05-14T02:44:14.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsxz00087ksh1p69d7dg","content":"<p>HELLO WORLD</p>\r\n<span id=\"more\"></span>\r\n","site":{"data":{}},"excerpt":"<p>HELLO WORLD</p>","more":""},{"title":"Jane Street Puzzle @ 2023.1","date":"2023-05-14T03:27:39.000Z","updated":"2023-05-14T03:27:39.000Z","description":null,"copyright":true,"_content":"\n\n\n\n\n# 简介\n\n这道题目是 Jane Street 在 2023.1 出的，原文链接在[这里](https://www.janestreet.com/puzzles/lesses-more-index/)。\n\n题目大意是：给定一个四元的数字序列`(a,b,c,d)`，以及序列的变化规则，需要找到经过变换后能变成`(0,0,0,0)`的序列中，变换步数最多同时`a+b+c+d`最小的那个序列。\n\n其中，序列的变化规则形如：\n$$\n(a,b,c,d) \\stackrel{f}{\\longrightarrow}\n(\\lvert a-b \\rvert, \\lvert b-c \\rvert, \\lvert c-d \\rvert, \\lvert d-a \\rvert)\n$$\n最后要找的序列的限制条件是：\n$$\n\\begin{align}\n\\begin{matrix}\n    &(1)& 0 \\le a,b,c,d \\le 10^7 \\\\\n    &(2)& sum(a+b+c+d) \\rightarrow min \\\\\n    &(3)& num(f) \\rightarrow max \\\\\n\\end{matrix}\n\\end{align}\n$$\n定义了特殊情况`f(0,0,0,0)=1`\n\n<!-- more -->\n\n## 解法\n\n设输入序列为`(a,b,c,d)`\n\n注意到满足`a>b>c>d`的序列的变换次数一般会大一些，因为经过`f`变换，大多数的情况都是四个数参差不齐的情况，连续成立的大小关系比较少见，这里就假设`a>b>c>d`了\n\n定义一个归一化处理（记为`N`变换）：\n$$\n(a,b,c,d) \\rightarrow (a-d,b-d,c-d,0) \\rightarrow (1,\\frac{b-d}{a-d},\\frac{c-d}{b-d},0)\n$$\n上式结果记为`(1,x,y,0)`，按照前面假设的`a>b>c>d`，这里有`1>x>y>0`\n\n要让`f`变换的次数尽量多，每次变换结果的归一化形式就需要尽量接近。最极端的情况是不变，这样就可以无限下去了\n\n在归一化空间中，对`(1,x,y,0)`做`f`变换：\n$$\n(1,x,y,0) \\stackrel{f}{\\longrightarrow} (1-x,x-y,y,1) \\\\\n$$\n`N`变换需要以四元组最大的数作为约数：（这里四元组可能还有其他的排法）\n$$\n(1,1-x,x-y,y) \\stackrel{N}{\\longrightarrow} (1,\\frac{1-x-y}{1-y},\\frac{x-2y}{1-y},0) \\\\\n或者：\n(1,y,x-y,1-x) \\stackrel{N}{\\longrightarrow} (1,\\frac{x+y-1}{x},\\frac{2x-y+1}{x},0)\n$$\n以第一行为例，和开始归一化的`(1,x,y,0)`接近，可以消去`y`得到一个方程：\n$$\nx^3-4x^2+6x-2=0\n$$\n解方程可以得到一个`x=0.456311, y=0.160713`\n\n接下来需要用归一化的结果在题目的范围`[1,1e8]`中反推一个初始序列出来，推导过程就省略了\n\n```python\nx = 0.8392867552141612\ny = 0.5436890126920764\n\nMAX_NUM = 10000000\nERROR = 1e-3\n\n\ndef check(a, b, c):\n    d = 0\n    cnt = 1\n    while True:\n        a, b, c, d = abs(a - b), abs(b - c), abs(c - d), abs(d - a)\n        cnt += 1\n        if a == 0 and b == 0 and c == 0 and d == 0:\n            print(f'check({a},{b},{c},0) is true, count: {cnt}')\n            break\n        elif cnt >= 1000:\n            break\n\n\ndef find():\n    for i in range(MAX_NUM):\n        # print(i)\n        first = x * i\n        second = y * i\n        if abs(int(first) - first) <= ERROR and abs(int(second) - second) <= ERROR:\n            print(f'i, first, second: {i}, {first}, {second}')\n            check(i, int(first), int(second))\n\n\nif __name__ == '__main__':\n    find()\n    print('---')\n    check(8646064, 3945294, 1389537)\n```\n\n最后可以得到结果了：`(8646064, 3945294, 1389537, 0)`","source":"_posts/jane-street-puzzle-2023.1.md","raw":"---\ntitle: Jane Street Puzzle @ 2023.1\ndate: 2023-05-14 11:27:39\nupdated: 2023-05-14 11:27:39\ntags: [Puzzle]\ncategories: [随笔]\ndescription:\ncopyright: true\n---\n\n\n\n\n\n# 简介\n\n这道题目是 Jane Street 在 2023.1 出的，原文链接在[这里](https://www.janestreet.com/puzzles/lesses-more-index/)。\n\n题目大意是：给定一个四元的数字序列`(a,b,c,d)`，以及序列的变化规则，需要找到经过变换后能变成`(0,0,0,0)`的序列中，变换步数最多同时`a+b+c+d`最小的那个序列。\n\n其中，序列的变化规则形如：\n$$\n(a,b,c,d) \\stackrel{f}{\\longrightarrow}\n(\\lvert a-b \\rvert, \\lvert b-c \\rvert, \\lvert c-d \\rvert, \\lvert d-a \\rvert)\n$$\n最后要找的序列的限制条件是：\n$$\n\\begin{align}\n\\begin{matrix}\n    &(1)& 0 \\le a,b,c,d \\le 10^7 \\\\\n    &(2)& sum(a+b+c+d) \\rightarrow min \\\\\n    &(3)& num(f) \\rightarrow max \\\\\n\\end{matrix}\n\\end{align}\n$$\n定义了特殊情况`f(0,0,0,0)=1`\n\n<!-- more -->\n\n## 解法\n\n设输入序列为`(a,b,c,d)`\n\n注意到满足`a>b>c>d`的序列的变换次数一般会大一些，因为经过`f`变换，大多数的情况都是四个数参差不齐的情况，连续成立的大小关系比较少见，这里就假设`a>b>c>d`了\n\n定义一个归一化处理（记为`N`变换）：\n$$\n(a,b,c,d) \\rightarrow (a-d,b-d,c-d,0) \\rightarrow (1,\\frac{b-d}{a-d},\\frac{c-d}{b-d},0)\n$$\n上式结果记为`(1,x,y,0)`，按照前面假设的`a>b>c>d`，这里有`1>x>y>0`\n\n要让`f`变换的次数尽量多，每次变换结果的归一化形式就需要尽量接近。最极端的情况是不变，这样就可以无限下去了\n\n在归一化空间中，对`(1,x,y,0)`做`f`变换：\n$$\n(1,x,y,0) \\stackrel{f}{\\longrightarrow} (1-x,x-y,y,1) \\\\\n$$\n`N`变换需要以四元组最大的数作为约数：（这里四元组可能还有其他的排法）\n$$\n(1,1-x,x-y,y) \\stackrel{N}{\\longrightarrow} (1,\\frac{1-x-y}{1-y},\\frac{x-2y}{1-y},0) \\\\\n或者：\n(1,y,x-y,1-x) \\stackrel{N}{\\longrightarrow} (1,\\frac{x+y-1}{x},\\frac{2x-y+1}{x},0)\n$$\n以第一行为例，和开始归一化的`(1,x,y,0)`接近，可以消去`y`得到一个方程：\n$$\nx^3-4x^2+6x-2=0\n$$\n解方程可以得到一个`x=0.456311, y=0.160713`\n\n接下来需要用归一化的结果在题目的范围`[1,1e8]`中反推一个初始序列出来，推导过程就省略了\n\n```python\nx = 0.8392867552141612\ny = 0.5436890126920764\n\nMAX_NUM = 10000000\nERROR = 1e-3\n\n\ndef check(a, b, c):\n    d = 0\n    cnt = 1\n    while True:\n        a, b, c, d = abs(a - b), abs(b - c), abs(c - d), abs(d - a)\n        cnt += 1\n        if a == 0 and b == 0 and c == 0 and d == 0:\n            print(f'check({a},{b},{c},0) is true, count: {cnt}')\n            break\n        elif cnt >= 1000:\n            break\n\n\ndef find():\n    for i in range(MAX_NUM):\n        # print(i)\n        first = x * i\n        second = y * i\n        if abs(int(first) - first) <= ERROR and abs(int(second) - second) <= ERROR:\n            print(f'i, first, second: {i}, {first}, {second}')\n            check(i, int(first), int(second))\n\n\nif __name__ == '__main__':\n    find()\n    print('---')\n    check(8646064, 3945294, 1389537)\n```\n\n最后可以得到结果了：`(8646064, 3945294, 1389537, 0)`","slug":"jane-street-puzzle-2023.1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsy2000c7kshd4s35qa8","content":"<h1 id=\"简介\">简介</h1>\r\n<p>这道题目是 Jane Street 在 2023.1 出的，原文链接在<a\r\nhref=\"https://www.janestreet.com/puzzles/lesses-more-index/\">这里</a>。</p>\r\n<p>题目大意是：给定一个四元的数字序列<code>(a,b,c,d)</code>，以及序列的变化规则，需要找到经过变换后能变成<code>(0,0,0,0)</code>的序列中，变换步数最多同时<code>a+b+c+d</code>最小的那个序列。</p>\r\n<p>其中，序列的变化规则形如： <span class=\"math display\">\\[\r\n(a,b,c,d) \\stackrel{f}{\\longrightarrow}\r\n(\\lvert a-b \\rvert, \\lvert b-c \\rvert, \\lvert c-d \\rvert, \\lvert d-a\r\n\\rvert)\r\n\\]</span> 最后要找的序列的限制条件是： <span class=\"math display\">\\[\r\n\\begin{align}\r\n\\begin{matrix}\r\n    &amp;(1)&amp; 0 \\le a,b,c,d \\le 10^7 \\\\\r\n    &amp;(2)&amp; sum(a+b+c+d) \\rightarrow min \\\\\r\n    &amp;(3)&amp; num(f) \\rightarrow max \\\\\r\n\\end{matrix}\r\n\\end{align}\r\n\\]</span> 定义了特殊情况<code>f(0,0,0,0)=1</code></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"解法\">解法</h2>\r\n<p>设输入序列为<code>(a,b,c,d)</code></p>\r\n<p>注意到满足<code>a&gt;b&gt;c&gt;d</code>的序列的变换次数一般会大一些，因为经过<code>f</code>变换，大多数的情况都是四个数参差不齐的情况，连续成立的大小关系比较少见，这里就假设<code>a&gt;b&gt;c&gt;d</code>了</p>\r\n<p>定义一个归一化处理（记为<code>N</code>变换）： <span\r\nclass=\"math display\">\\[\r\n(a,b,c,d) \\rightarrow (a-d,b-d,c-d,0) \\rightarrow\r\n(1,\\frac{b-d}{a-d},\\frac{c-d}{b-d},0)\r\n\\]</span>\r\n上式结果记为<code>(1,x,y,0)</code>，按照前面假设的<code>a&gt;b&gt;c&gt;d</code>，这里有<code>1&gt;x&gt;y&gt;0</code></p>\r\n<p>要让<code>f</code>变换的次数尽量多，每次变换结果的归一化形式就需要尽量接近。最极端的情况是不变，这样就可以无限下去了</p>\r\n<p>在归一化空间中，对<code>(1,x,y,0)</code>做<code>f</code>变换： <span\r\nclass=\"math display\">\\[\r\n(1,x,y,0) \\stackrel{f}{\\longrightarrow} (1-x,x-y,y,1) \\\\\r\n\\]</span>\r\n<code>N</code>变换需要以四元组最大的数作为约数：（这里四元组可能还有其他的排法）\r\n<span class=\"math display\">\\[\r\n(1,1-x,x-y,y) \\stackrel{N}{\\longrightarrow}\r\n(1,\\frac{1-x-y}{1-y},\\frac{x-2y}{1-y},0) \\\\\r\n或者：\r\n(1,y,x-y,1-x) \\stackrel{N}{\\longrightarrow}\r\n(1,\\frac{x+y-1}{x},\\frac{2x-y+1}{x},0)\r\n\\]</span>\r\n以第一行为例，和开始归一化的<code>(1,x,y,0)</code>接近，可以消去<code>y</code>得到一个方程：\r\n<span class=\"math display\">\\[\r\nx^3-4x^2+6x-2=0\r\n\\]</span> 解方程可以得到一个<code>x=0.456311, y=0.160713</code></p>\r\n<p>接下来需要用归一化的结果在题目的范围<code>[1,1e8]</code>中反推一个初始序列出来，推导过程就省略了</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0.8392867552141612</span></span><br><span class=\"line\">y = <span class=\"number\">0.5436890126920764</span></span><br><span class=\"line\"></span><br><span class=\"line\">MAX_NUM = <span class=\"number\">10000000</span></span><br><span class=\"line\">ERROR = <span class=\"number\">1e-3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span>(<span class=\"params\">a, b, c</span>):</span></span><br><span class=\"line\">    d = <span class=\"number\">0</span></span><br><span class=\"line\">    cnt = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        a, b, c, d = <span class=\"built_in\">abs</span>(a - b), <span class=\"built_in\">abs</span>(b - c), <span class=\"built_in\">abs</span>(c - d), <span class=\"built_in\">abs</span>(d - a)</span><br><span class=\"line\">        cnt += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> a == <span class=\"number\">0</span> <span class=\"keyword\">and</span> b == <span class=\"number\">0</span> <span class=\"keyword\">and</span> c == <span class=\"number\">0</span> <span class=\"keyword\">and</span> d == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;check(<span class=\"subst\">&#123;a&#125;</span>,<span class=\"subst\">&#123;b&#125;</span>,<span class=\"subst\">&#123;c&#125;</span>,0) is true, count: <span class=\"subst\">&#123;cnt&#125;</span>&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> cnt &gt;= <span class=\"number\">1000</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(MAX_NUM):</span><br><span class=\"line\">        <span class=\"comment\"># print(i)</span></span><br><span class=\"line\">        first = x * i</span><br><span class=\"line\">        second = y * i</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(<span class=\"built_in\">int</span>(first) - first) &lt;= ERROR <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(<span class=\"built_in\">int</span>(second) - second) &lt;= ERROR:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;i, first, second: <span class=\"subst\">&#123;i&#125;</span>, <span class=\"subst\">&#123;first&#125;</span>, <span class=\"subst\">&#123;second&#125;</span>&#x27;</span>)</span><br><span class=\"line\">            check(i, <span class=\"built_in\">int</span>(first), <span class=\"built_in\">int</span>(second))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    find()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---&#x27;</span>)</span><br><span class=\"line\">    check(<span class=\"number\">8646064</span>, <span class=\"number\">3945294</span>, <span class=\"number\">1389537</span>)</span><br></pre></td></tr></table></figure>\r\n<p>最后可以得到结果了：<code>(8646064, 3945294, 1389537, 0)</code></p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\">简介</h1>\r\n<p>这道题目是 Jane Street 在 2023.1 出的，原文链接在<a\r\nhref=\"https://www.janestreet.com/puzzles/lesses-more-index/\">这里</a>。</p>\r\n<p>题目大意是：给定一个四元的数字序列<code>(a,b,c,d)</code>，以及序列的变化规则，需要找到经过变换后能变成<code>(0,0,0,0)</code>的序列中，变换步数最多同时<code>a+b+c+d</code>最小的那个序列。</p>\r\n<p>其中，序列的变化规则形如： <span class=\"math display\">\\[\r\n(a,b,c,d) \\stackrel{f}{\\longrightarrow}\r\n(\\lvert a-b \\rvert, \\lvert b-c \\rvert, \\lvert c-d \\rvert, \\lvert d-a\r\n\\rvert)\r\n\\]</span> 最后要找的序列的限制条件是： <span class=\"math display\">\\[\r\n\\begin{align}\r\n\\begin{matrix}\r\n    &amp;(1)&amp; 0 \\le a,b,c,d \\le 10^7 \\\\\r\n    &amp;(2)&amp; sum(a+b+c+d) \\rightarrow min \\\\\r\n    &amp;(3)&amp; num(f) \\rightarrow max \\\\\r\n\\end{matrix}\r\n\\end{align}\r\n\\]</span> 定义了特殊情况<code>f(0,0,0,0)=1</code></p>","more":"<h2 id=\"解法\">解法</h2>\r\n<p>设输入序列为<code>(a,b,c,d)</code></p>\r\n<p>注意到满足<code>a&gt;b&gt;c&gt;d</code>的序列的变换次数一般会大一些，因为经过<code>f</code>变换，大多数的情况都是四个数参差不齐的情况，连续成立的大小关系比较少见，这里就假设<code>a&gt;b&gt;c&gt;d</code>了</p>\r\n<p>定义一个归一化处理（记为<code>N</code>变换）： <span\r\nclass=\"math display\">\\[\r\n(a,b,c,d) \\rightarrow (a-d,b-d,c-d,0) \\rightarrow\r\n(1,\\frac{b-d}{a-d},\\frac{c-d}{b-d},0)\r\n\\]</span>\r\n上式结果记为<code>(1,x,y,0)</code>，按照前面假设的<code>a&gt;b&gt;c&gt;d</code>，这里有<code>1&gt;x&gt;y&gt;0</code></p>\r\n<p>要让<code>f</code>变换的次数尽量多，每次变换结果的归一化形式就需要尽量接近。最极端的情况是不变，这样就可以无限下去了</p>\r\n<p>在归一化空间中，对<code>(1,x,y,0)</code>做<code>f</code>变换： <span\r\nclass=\"math display\">\\[\r\n(1,x,y,0) \\stackrel{f}{\\longrightarrow} (1-x,x-y,y,1) \\\\\r\n\\]</span>\r\n<code>N</code>变换需要以四元组最大的数作为约数：（这里四元组可能还有其他的排法）\r\n<span class=\"math display\">\\[\r\n(1,1-x,x-y,y) \\stackrel{N}{\\longrightarrow}\r\n(1,\\frac{1-x-y}{1-y},\\frac{x-2y}{1-y},0) \\\\\r\n或者：\r\n(1,y,x-y,1-x) \\stackrel{N}{\\longrightarrow}\r\n(1,\\frac{x+y-1}{x},\\frac{2x-y+1}{x},0)\r\n\\]</span>\r\n以第一行为例，和开始归一化的<code>(1,x,y,0)</code>接近，可以消去<code>y</code>得到一个方程：\r\n<span class=\"math display\">\\[\r\nx^3-4x^2+6x-2=0\r\n\\]</span> 解方程可以得到一个<code>x=0.456311, y=0.160713</code></p>\r\n<p>接下来需要用归一化的结果在题目的范围<code>[1,1e8]</code>中反推一个初始序列出来，推导过程就省略了</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0.8392867552141612</span></span><br><span class=\"line\">y = <span class=\"number\">0.5436890126920764</span></span><br><span class=\"line\"></span><br><span class=\"line\">MAX_NUM = <span class=\"number\">10000000</span></span><br><span class=\"line\">ERROR = <span class=\"number\">1e-3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span>(<span class=\"params\">a, b, c</span>):</span></span><br><span class=\"line\">    d = <span class=\"number\">0</span></span><br><span class=\"line\">    cnt = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        a, b, c, d = <span class=\"built_in\">abs</span>(a - b), <span class=\"built_in\">abs</span>(b - c), <span class=\"built_in\">abs</span>(c - d), <span class=\"built_in\">abs</span>(d - a)</span><br><span class=\"line\">        cnt += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> a == <span class=\"number\">0</span> <span class=\"keyword\">and</span> b == <span class=\"number\">0</span> <span class=\"keyword\">and</span> c == <span class=\"number\">0</span> <span class=\"keyword\">and</span> d == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;check(<span class=\"subst\">&#123;a&#125;</span>,<span class=\"subst\">&#123;b&#125;</span>,<span class=\"subst\">&#123;c&#125;</span>,0) is true, count: <span class=\"subst\">&#123;cnt&#125;</span>&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> cnt &gt;= <span class=\"number\">1000</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(MAX_NUM):</span><br><span class=\"line\">        <span class=\"comment\"># print(i)</span></span><br><span class=\"line\">        first = x * i</span><br><span class=\"line\">        second = y * i</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(<span class=\"built_in\">int</span>(first) - first) &lt;= ERROR <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(<span class=\"built_in\">int</span>(second) - second) &lt;= ERROR:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;i, first, second: <span class=\"subst\">&#123;i&#125;</span>, <span class=\"subst\">&#123;first&#125;</span>, <span class=\"subst\">&#123;second&#125;</span>&#x27;</span>)</span><br><span class=\"line\">            check(i, <span class=\"built_in\">int</span>(first), <span class=\"built_in\">int</span>(second))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    find()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---&#x27;</span>)</span><br><span class=\"line\">    check(<span class=\"number\">8646064</span>, <span class=\"number\">3945294</span>, <span class=\"number\">1389537</span>)</span><br></pre></td></tr></table></figure>\r\n<p>最后可以得到结果了：<code>(8646064, 3945294, 1389537, 0)</code></p>"},{"title":"gdb、常用寄存器","date":"2021-11-22T08:43:50.000Z","_content":"\n\n\n\n\n# 简介\n\n最近在写CSAPP的bomb lab，需要用gdb调试，还涉及到一些汇编的代码。这里记录一下gdb调试的方法，以及常用寄存器的作用。\n\n<!-- more -->\n\n## gdb\n\n| `r`                   | 运行程序                                                     |\n| --------------------- | ------------------------------------------------------------ |\n| `b *<地址>`           | 在某个地址设置断点，具体哪里，可以看反汇编的代码，可以根据那个直接复制粘贴设断点的 |\n| `d`                   | 删除所有断点                                                 |\n| `d <断点编号>`        | 删除指定断点                                                 |\n| `info b`              | 查看所有断点                                                 |\n| `continue`            | 从断点处继续执行                                             |\n| `display $<寄存器名>` | 跟踪寄存器，碰到断点停下时会显示出所有跟踪的寄存器的当前值，非常好用的一个命令，注意的是gdb中表示寄存器的话前面用的不是百分符号%，而是美元符号$ |\n| `x/<参数> <地址>`     | 访问地址的内存，其实就是间接访问，也是很好用的指令，关于参数，s是输出为字符串，d为输出为十进制，x为输出为十六进制，b、w、l、q控制输出字节，默认是w，四字节，s字符串不受这个控制除外。 |\n| `info r`              | 查看所有寄存器                                               |\n\n用gdb运行带参数的可执行文件：\n\n```bash\ngdb --args bomb defuse\t// defuse是参数\n```\n\n\n\n## 常用寄存器\n\n寄存器一般以`e`或`r`开头，`e`代表32位，`r`代表64位。\n\n\n\n一般寄存器：AX、BX、CX、DX\nAX：累积暂存器，BX:基底暂存器，CX:计数暂存器，DX:资料暂存器\n\n> 前面有函数调用的话，一般`%rax`就是程序的返回值\n\n索引暂存器：SI、DI\nSI：来源索引暂存器，DI：目的索引暂存器\n\n堆叠、基底暂存器：SP、BP\nSP：堆叠指标暂存器，BP：基底指标暂存器\n\n\n\n`ebp`称为基址指针（base pointer），在反编译的文件中，经常可以看到一个函数的起始代码：\n\n```asm\npush ebp \t\t;保存当前ebp\nmov ebp,esp \t;EBP设为当前堆栈指针\nsub esp, xxx \t;预留xxx字节给函数临时变量.\n...\n\n; bomb example\n0000000000400efc <phase_2>:\n  400efc:\t55                   \tpush   %rbp\n  400efd:\t53                   \tpush   %rbx\n  400efe:\t48 83 ec 28          \tsub    $0x28,%rsp\n  400f02:\t48 89 e6             \tmov    %rsp,%rsi\n  ; ...\n  400f3c:\t48 83 c4 28          \tadd    $0x28,%rsp\n  400f40:\t5b                   \tpop    %rbx\n  400f41:\t5d                   \tpop    %rbp\n  400f42:\tc3                   \tretq   \n```\n\n这样一来，EBP 构成了该函数的一个框架，在EBP上方分别是原来的EBP，返回地址和参数。\n\n\n\n`esp`专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，`esp`也就越来越小。在32位平台上，`esp`每次减少4字节。","source":"_posts/register.md","raw":"---\ntitle: gdb、常用寄存器\ndate: 2021-11-22 16:43:50\ntags: \n- Register\n- GDB\ncategories:\n- 操作系统\n---\n\n\n\n\n\n# 简介\n\n最近在写CSAPP的bomb lab，需要用gdb调试，还涉及到一些汇编的代码。这里记录一下gdb调试的方法，以及常用寄存器的作用。\n\n<!-- more -->\n\n## gdb\n\n| `r`                   | 运行程序                                                     |\n| --------------------- | ------------------------------------------------------------ |\n| `b *<地址>`           | 在某个地址设置断点，具体哪里，可以看反汇编的代码，可以根据那个直接复制粘贴设断点的 |\n| `d`                   | 删除所有断点                                                 |\n| `d <断点编号>`        | 删除指定断点                                                 |\n| `info b`              | 查看所有断点                                                 |\n| `continue`            | 从断点处继续执行                                             |\n| `display $<寄存器名>` | 跟踪寄存器，碰到断点停下时会显示出所有跟踪的寄存器的当前值，非常好用的一个命令，注意的是gdb中表示寄存器的话前面用的不是百分符号%，而是美元符号$ |\n| `x/<参数> <地址>`     | 访问地址的内存，其实就是间接访问，也是很好用的指令，关于参数，s是输出为字符串，d为输出为十进制，x为输出为十六进制，b、w、l、q控制输出字节，默认是w，四字节，s字符串不受这个控制除外。 |\n| `info r`              | 查看所有寄存器                                               |\n\n用gdb运行带参数的可执行文件：\n\n```bash\ngdb --args bomb defuse\t// defuse是参数\n```\n\n\n\n## 常用寄存器\n\n寄存器一般以`e`或`r`开头，`e`代表32位，`r`代表64位。\n\n\n\n一般寄存器：AX、BX、CX、DX\nAX：累积暂存器，BX:基底暂存器，CX:计数暂存器，DX:资料暂存器\n\n> 前面有函数调用的话，一般`%rax`就是程序的返回值\n\n索引暂存器：SI、DI\nSI：来源索引暂存器，DI：目的索引暂存器\n\n堆叠、基底暂存器：SP、BP\nSP：堆叠指标暂存器，BP：基底指标暂存器\n\n\n\n`ebp`称为基址指针（base pointer），在反编译的文件中，经常可以看到一个函数的起始代码：\n\n```asm\npush ebp \t\t;保存当前ebp\nmov ebp,esp \t;EBP设为当前堆栈指针\nsub esp, xxx \t;预留xxx字节给函数临时变量.\n...\n\n; bomb example\n0000000000400efc <phase_2>:\n  400efc:\t55                   \tpush   %rbp\n  400efd:\t53                   \tpush   %rbx\n  400efe:\t48 83 ec 28          \tsub    $0x28,%rsp\n  400f02:\t48 89 e6             \tmov    %rsp,%rsi\n  ; ...\n  400f3c:\t48 83 c4 28          \tadd    $0x28,%rsp\n  400f40:\t5b                   \tpop    %rbx\n  400f41:\t5d                   \tpop    %rbp\n  400f42:\tc3                   \tretq   \n```\n\n这样一来，EBP 构成了该函数的一个框架，在EBP上方分别是原来的EBP，返回地址和参数。\n\n\n\n`esp`专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，`esp`也就越来越小。在32位平台上，`esp`每次减少4字节。","slug":"register","published":1,"updated":"2023-05-14T03:18:50.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsy3000d7ksh4g1daeqi","content":"<h1 id=\"简介\">简介</h1>\r\n<p>最近在写CSAPP的bomb\r\nlab，需要用gdb调试，还涉及到一些汇编的代码。这里记录一下gdb调试的方法，以及常用寄存器的作用。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"gdb\">gdb</h2>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 74%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th><code>r</code></th>\r\n<th>运行程序</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>b *&lt;地址&gt;</code></td>\r\n<td>在某个地址设置断点，具体哪里，可以看反汇编的代码，可以根据那个直接复制粘贴设断点的</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>d</code></td>\r\n<td>删除所有断点</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>d &lt;断点编号&gt;</code></td>\r\n<td>删除指定断点</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>info b</code></td>\r\n<td>查看所有断点</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>continue</code></td>\r\n<td>从断点处继续执行</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>display $&lt;寄存器名&gt;</code></td>\r\n<td>跟踪寄存器，碰到断点停下时会显示出所有跟踪的寄存器的当前值，非常好用的一个命令，注意的是gdb中表示寄存器的话前面用的不是百分符号%，而是美元符号$</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>x/&lt;参数&gt; &lt;地址&gt;</code></td>\r\n<td>访问地址的内存，其实就是间接访问，也是很好用的指令，关于参数，s是输出为字符串，d为输出为十进制，x为输出为十六进制，b、w、l、q控制输出字节，默认是w，四字节，s字符串不受这个控制除外。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>info r</code></td>\r\n<td>查看所有寄存器</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>用gdb运行带参数的可执行文件：</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb --args bomb defuse\t// defuse是参数</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"常用寄存器\">常用寄存器</h2>\r\n<p>寄存器一般以<code>e</code>或<code>r</code>开头，<code>e</code>代表32位，<code>r</code>代表64位。</p>\r\n<p>一般寄存器：AX、BX、CX、DX\r\nAX：累积暂存器，BX:基底暂存器，CX:计数暂存器，DX:资料暂存器</p>\r\n<blockquote>\r\n<p>前面有函数调用的话，一般<code>%rax</code>就是程序的返回值</p>\r\n</blockquote>\r\n<p>索引暂存器：SI、DI SI：来源索引暂存器，DI：目的索引暂存器</p>\r\n<p>堆叠、基底暂存器：SP、BP SP：堆叠指标暂存器，BP：基底指标暂存器</p>\r\n<p><code>ebp</code>称为基址指针（base\r\npointer），在反编译的文件中，经常可以看到一个函数的起始代码：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push ebp \t\t;保存当前ebp</span><br><span class=\"line\">mov ebp,esp \t;EBP设为当前堆栈指针</span><br><span class=\"line\">sub esp, xxx \t;预留xxx字节给函数临时变量.</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">; bomb example</span><br><span class=\"line\">0000000000400efc &lt;phase_2&gt;:</span><br><span class=\"line\">  400efc:\t55                   \tpush   %rbp</span><br><span class=\"line\">  400efd:\t53                   \tpush   %rbx</span><br><span class=\"line\">  400efe:\t48 83 ec 28          \tsub    $0x28,%rsp</span><br><span class=\"line\">  400f02:\t48 89 e6             \tmov    %rsp,%rsi</span><br><span class=\"line\">  ; ...</span><br><span class=\"line\">  400f3c:\t48 83 c4 28          \tadd    $0x28,%rsp</span><br><span class=\"line\">  400f40:\t5b                   \tpop    %rbx</span><br><span class=\"line\">  400f41:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  400f42:\tc3                   \tretq   </span><br></pre></td></tr></table></figure>\r\n<p>这样一来，EBP\r\n构成了该函数的一个框架，在EBP上方分别是原来的EBP，返回地址和参数。</p>\r\n<p><code>esp</code>专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，<code>esp</code>也就越来越小。在32位平台上，<code>esp</code>每次减少4字节。</p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\">简介</h1>\r\n<p>最近在写CSAPP的bomb\r\nlab，需要用gdb调试，还涉及到一些汇编的代码。这里记录一下gdb调试的方法，以及常用寄存器的作用。</p>","more":"<h2 id=\"gdb\">gdb</h2>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 74%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th><code>r</code></th>\r\n<th>运行程序</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>b *&lt;地址&gt;</code></td>\r\n<td>在某个地址设置断点，具体哪里，可以看反汇编的代码，可以根据那个直接复制粘贴设断点的</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>d</code></td>\r\n<td>删除所有断点</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>d &lt;断点编号&gt;</code></td>\r\n<td>删除指定断点</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>info b</code></td>\r\n<td>查看所有断点</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>continue</code></td>\r\n<td>从断点处继续执行</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>display $&lt;寄存器名&gt;</code></td>\r\n<td>跟踪寄存器，碰到断点停下时会显示出所有跟踪的寄存器的当前值，非常好用的一个命令，注意的是gdb中表示寄存器的话前面用的不是百分符号%，而是美元符号$</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>x/&lt;参数&gt; &lt;地址&gt;</code></td>\r\n<td>访问地址的内存，其实就是间接访问，也是很好用的指令，关于参数，s是输出为字符串，d为输出为十进制，x为输出为十六进制，b、w、l、q控制输出字节，默认是w，四字节，s字符串不受这个控制除外。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>info r</code></td>\r\n<td>查看所有寄存器</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>用gdb运行带参数的可执行文件：</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb --args bomb defuse\t// defuse是参数</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"常用寄存器\">常用寄存器</h2>\r\n<p>寄存器一般以<code>e</code>或<code>r</code>开头，<code>e</code>代表32位，<code>r</code>代表64位。</p>\r\n<p>一般寄存器：AX、BX、CX、DX\r\nAX：累积暂存器，BX:基底暂存器，CX:计数暂存器，DX:资料暂存器</p>\r\n<blockquote>\r\n<p>前面有函数调用的话，一般<code>%rax</code>就是程序的返回值</p>\r\n</blockquote>\r\n<p>索引暂存器：SI、DI SI：来源索引暂存器，DI：目的索引暂存器</p>\r\n<p>堆叠、基底暂存器：SP、BP SP：堆叠指标暂存器，BP：基底指标暂存器</p>\r\n<p><code>ebp</code>称为基址指针（base\r\npointer），在反编译的文件中，经常可以看到一个函数的起始代码：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push ebp \t\t;保存当前ebp</span><br><span class=\"line\">mov ebp,esp \t;EBP设为当前堆栈指针</span><br><span class=\"line\">sub esp, xxx \t;预留xxx字节给函数临时变量.</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">; bomb example</span><br><span class=\"line\">0000000000400efc &lt;phase_2&gt;:</span><br><span class=\"line\">  400efc:\t55                   \tpush   %rbp</span><br><span class=\"line\">  400efd:\t53                   \tpush   %rbx</span><br><span class=\"line\">  400efe:\t48 83 ec 28          \tsub    $0x28,%rsp</span><br><span class=\"line\">  400f02:\t48 89 e6             \tmov    %rsp,%rsi</span><br><span class=\"line\">  ; ...</span><br><span class=\"line\">  400f3c:\t48 83 c4 28          \tadd    $0x28,%rsp</span><br><span class=\"line\">  400f40:\t5b                   \tpop    %rbx</span><br><span class=\"line\">  400f41:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  400f42:\tc3                   \tretq   </span><br></pre></td></tr></table></figure>\r\n<p>这样一来，EBP\r\n构成了该函数的一个框架，在EBP上方分别是原来的EBP，返回地址和参数。</p>\r\n<p><code>esp</code>专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，<code>esp</code>也就越来越小。在32位平台上，<code>esp</code>每次减少4字节。</p>"},{"title":"optimized_cpp-ch2","date":"2021-11-12T16:34:39.000Z","_content":"\n# Ch2 实现智能指针\n\n智能指针最基本的功能：对超出作用域的对象进行释放\n\n<!-- more -->\n\n```cpp\n// class shape_type\nenum class shape_type {\n    circle,\n    triangle,\n    rectangle,\n};\n// create shape\nshape* create_shape(shape_type type) {\n    switch (type) {\n    case shape_type::circle:\n        return new circle();\n    case shape_type::triangle:\n        return new triangle();\n    case shape_type::rectangle:\n        return new rectangle();\n    }\n}\n// wrapper\nclass shape_wrapper {\npublic:\n  explicit shape_wrapper(shape* ptr = nullptr): ptr_(ptr) {}\n  ~shape_wrapper() {\n    delete ptr_;\n  }\n  shape* get() const { return ptr_; }\n\nprivate:\n  shape* ptr_;\n};\n// example function\nvoid foo() {\n    // ...\n    shape_wrapper ptr_wrapper(create_shape(...));\n    // ...\n}\n```\n\n为了保证使用`create_shape`的返回值时，不会出现内存泄漏。我们需要把这个返回值放到一个本地变量中，并确保其析构函数会删除该对象。\n\n\n\n`shape_wrapper`仍然缺少的功能：\n\n* 这个类只适用于shape类\n* 行为不太像指针\n* 拷贝这类对象会引发异常\n\n\n\n**包装任意类型的指针**\n\n使用模板：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\npublic:\n  explicit shape_wrapper(T* ptr = nullptr): ptr_(ptr) {}\n  ~shape_wrapper() {\n    delete ptr_;\n  }\n  T* get() const { return ptr_; }\n\nprivate:\n  T* ptr_;\n};\n```\n\n\n\n**使`smart_ptr`行为更像指针**\n\n指针可以：\n\n* 用`*`解引用\n* 用`->`指向对象成员\n* 用在布尔表达式中\n\n\n\n加几个成员函数：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\n\t//...\n\tT& operator*() const {return *ptr_;}\n    T* operator->() const {return ptr_;}\n    operator bool() const {return ptr_;}\n    //...\n};\n```\n\n\n\n**拷贝构造和赋值**\n\n在拷贝智能指针时，因为对象并没有复制一份，因此可能会对同一块内存释放两次，导致程序崩溃。\n\n因此需要禁用拷贝：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\n\t//...\n    smart_ptr(const smart_ptr&)\n        = delete;\n    smart_ptr& operator=(const smart_ptr&)\n        = delete;\n};\n```\n\n但是```smart_ptr<shape> ptr2{ptr1}```仍然可能出现释放两次内存的错误。\n\n\n\n因此尝试在拷贝时转移指针的所有权：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\n    // 拷贝构造函数\n    smart_ptr(smart_ptr& other) {\n\t\tptr_ = other.release();\n    }\n    // 赋值函数\n    smart_ptr& operator=(smart_ptr& rhs) {\n\t\tsmart_ptr(rhs).swap(*this); // 构造临时对象\n        return *this;\n    }\n    // 释放对指针的所有权\n    T* release() {\n        T* ptr = ptr_;\n        ptr_ = nullptr;\n        return ptr;\n    }\n    // 交换对指针的所有权\n    void swap(smart_ptr& rhs) {\n        using std::swap;\n        swap(ptr_, rhs.ptr_);\n    }\n};\n```\n\n上面的实现的问题是：\n\n如果把一个smart_ptr传递给另一个，你就不再拥有这个对象了。\n\n\n\n**使用“移动”改善smart_ptr的行为**\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\n    // 移动构造\n\tsmart_ptr(smart_ptr&& other) {\n\t\tptr_ = other.release();\n    }\n    // 拷贝构造\n    smart_ptr& operator=(smart_ptr rhs) {\n        rhs.swap(*this);\n        return *this;\n    }\n};\n```\n\n> C++的规则：\n> 如果提供了移动构造函数而没有手动提供拷贝构造函数，那么后者会被禁用。\n\n因此：\n\n```cpp\nsmart_ptr<shape> ptr1{create_shape(shape_type::circle)};\nsmart_ptr<shape> ptr2{ptr1};             // 编译出错\nsmart_ptr<shape> ptr3;\nptr3 = ptr1;                             // 编译出错\nptr3 = std::move(ptr1);                  // OK，可以\nsmart_ptr<shape> ptr4{std::move(ptr3)};  // OK，可以\n```\n\n以上就是C++11的`unique_ptr`的基本行为\n\n\n\n但是，一个`circle*`可以隐式地转换成`shape*`，而上面地`smart_ptr<circle>`却不能自动转换成`smart_ptr<shape>`，这还不够自然。\n\n```cpp\ntemplate <typename U>\nclass smart_ptr {\n\tsmart_ptr(smart_ptr<U>&& other) {\n        ptr_ = other.release(); // 不正确的转换会在编译时报错\n    }  \n};\n```\n\n上面的这个构造函数不会被编译器看作是移动构造函数\n\n\n\n**引用计数**\n\n和`unique_ptr`相比，多个`shared_ptr`可以同时拥有一个对象，因此它们需要共享一个计数。\n\n```cpp\nclass shared_count {\npublic:\n\tshared_count();\n    void add_count();\n    long reduce_count();\n    long get_count() const;\nprivate:\n    long count;\n};\n```\n\n\n\n添加了shared_count的smart_ptr：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\npublic:\n    explicit smart_ptr(T* ptr = nullptr): ptr_(ptr) {\n        if(ptr) {\n            shared_count_ = new shared_count();\n        }\n    }\n    ~smart_ptr() {\n        if(ptr_ && shared_count_->reduce_count()) {\n            delete ptr_;\n            delete shared_count_;\n        }\n    }\nprivate:\n    T* ptr_;\n    shared_count* shared_count_;\n};\n```\n\n\n\n新的swap函数：\n\n```cpp\nvoid swap(smart_ptr& rhs) {\n\tusing std::swap;\n\tswap(ptr_, rhs.ptr_);\n\tswap(shared_count_, rhs.shared_count_);\n}\n```\n\n\n\n新的拷贝构造，移动构造函数：\n\n```cpp\nsmart_ptr(const smart_ptr& other) {\n    ptr_ = other.ptr_;\n    if (ptr_) {\n      other.shared_count_->add_count();\n      shared_count_ = other.shared_count_;\n    }\n}\ntemplate <typename U>\nsmart_ptr(const smart_ptr<U>& other) {\n    ptr_ = other.ptr_;\n    if (ptr_) {\n      other.shared_count_->add_count();\n      shared_count_ = other.shared_count_;\n    }\n}\ntemplate <typename U>\nsmart_ptr(smart_ptr<U>&& other) {\n    ptr_ = other.ptr_;\n    if (ptr_) {\n      shared_count_ = other.shared_count_;\n      other.ptr_ = nullptr;\n    }\n}\n```\n\n\n\n**指针类型转换**\n\nc++中有不同的类型强制转换：\n`static_cast`、`reinterpret_cast`、`const_cast`、`dynamic_cast`\n\n","source":"_posts/optimized_cpp-ch2.md","raw":"---\ntitle: optimized_cpp-ch2\ndate: 2021-11-13 00:34:39\ntags: \n- C++\ncategories: \n- 语言\n---\n\n# Ch2 实现智能指针\n\n智能指针最基本的功能：对超出作用域的对象进行释放\n\n<!-- more -->\n\n```cpp\n// class shape_type\nenum class shape_type {\n    circle,\n    triangle,\n    rectangle,\n};\n// create shape\nshape* create_shape(shape_type type) {\n    switch (type) {\n    case shape_type::circle:\n        return new circle();\n    case shape_type::triangle:\n        return new triangle();\n    case shape_type::rectangle:\n        return new rectangle();\n    }\n}\n// wrapper\nclass shape_wrapper {\npublic:\n  explicit shape_wrapper(shape* ptr = nullptr): ptr_(ptr) {}\n  ~shape_wrapper() {\n    delete ptr_;\n  }\n  shape* get() const { return ptr_; }\n\nprivate:\n  shape* ptr_;\n};\n// example function\nvoid foo() {\n    // ...\n    shape_wrapper ptr_wrapper(create_shape(...));\n    // ...\n}\n```\n\n为了保证使用`create_shape`的返回值时，不会出现内存泄漏。我们需要把这个返回值放到一个本地变量中，并确保其析构函数会删除该对象。\n\n\n\n`shape_wrapper`仍然缺少的功能：\n\n* 这个类只适用于shape类\n* 行为不太像指针\n* 拷贝这类对象会引发异常\n\n\n\n**包装任意类型的指针**\n\n使用模板：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\npublic:\n  explicit shape_wrapper(T* ptr = nullptr): ptr_(ptr) {}\n  ~shape_wrapper() {\n    delete ptr_;\n  }\n  T* get() const { return ptr_; }\n\nprivate:\n  T* ptr_;\n};\n```\n\n\n\n**使`smart_ptr`行为更像指针**\n\n指针可以：\n\n* 用`*`解引用\n* 用`->`指向对象成员\n* 用在布尔表达式中\n\n\n\n加几个成员函数：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\n\t//...\n\tT& operator*() const {return *ptr_;}\n    T* operator->() const {return ptr_;}\n    operator bool() const {return ptr_;}\n    //...\n};\n```\n\n\n\n**拷贝构造和赋值**\n\n在拷贝智能指针时，因为对象并没有复制一份，因此可能会对同一块内存释放两次，导致程序崩溃。\n\n因此需要禁用拷贝：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\n\t//...\n    smart_ptr(const smart_ptr&)\n        = delete;\n    smart_ptr& operator=(const smart_ptr&)\n        = delete;\n};\n```\n\n但是```smart_ptr<shape> ptr2{ptr1}```仍然可能出现释放两次内存的错误。\n\n\n\n因此尝试在拷贝时转移指针的所有权：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\n    // 拷贝构造函数\n    smart_ptr(smart_ptr& other) {\n\t\tptr_ = other.release();\n    }\n    // 赋值函数\n    smart_ptr& operator=(smart_ptr& rhs) {\n\t\tsmart_ptr(rhs).swap(*this); // 构造临时对象\n        return *this;\n    }\n    // 释放对指针的所有权\n    T* release() {\n        T* ptr = ptr_;\n        ptr_ = nullptr;\n        return ptr;\n    }\n    // 交换对指针的所有权\n    void swap(smart_ptr& rhs) {\n        using std::swap;\n        swap(ptr_, rhs.ptr_);\n    }\n};\n```\n\n上面的实现的问题是：\n\n如果把一个smart_ptr传递给另一个，你就不再拥有这个对象了。\n\n\n\n**使用“移动”改善smart_ptr的行为**\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\n    // 移动构造\n\tsmart_ptr(smart_ptr&& other) {\n\t\tptr_ = other.release();\n    }\n    // 拷贝构造\n    smart_ptr& operator=(smart_ptr rhs) {\n        rhs.swap(*this);\n        return *this;\n    }\n};\n```\n\n> C++的规则：\n> 如果提供了移动构造函数而没有手动提供拷贝构造函数，那么后者会被禁用。\n\n因此：\n\n```cpp\nsmart_ptr<shape> ptr1{create_shape(shape_type::circle)};\nsmart_ptr<shape> ptr2{ptr1};             // 编译出错\nsmart_ptr<shape> ptr3;\nptr3 = ptr1;                             // 编译出错\nptr3 = std::move(ptr1);                  // OK，可以\nsmart_ptr<shape> ptr4{std::move(ptr3)};  // OK，可以\n```\n\n以上就是C++11的`unique_ptr`的基本行为\n\n\n\n但是，一个`circle*`可以隐式地转换成`shape*`，而上面地`smart_ptr<circle>`却不能自动转换成`smart_ptr<shape>`，这还不够自然。\n\n```cpp\ntemplate <typename U>\nclass smart_ptr {\n\tsmart_ptr(smart_ptr<U>&& other) {\n        ptr_ = other.release(); // 不正确的转换会在编译时报错\n    }  \n};\n```\n\n上面的这个构造函数不会被编译器看作是移动构造函数\n\n\n\n**引用计数**\n\n和`unique_ptr`相比，多个`shared_ptr`可以同时拥有一个对象，因此它们需要共享一个计数。\n\n```cpp\nclass shared_count {\npublic:\n\tshared_count();\n    void add_count();\n    long reduce_count();\n    long get_count() const;\nprivate:\n    long count;\n};\n```\n\n\n\n添加了shared_count的smart_ptr：\n\n```cpp\ntemplate <typename T>\nclass smart_ptr {\npublic:\n    explicit smart_ptr(T* ptr = nullptr): ptr_(ptr) {\n        if(ptr) {\n            shared_count_ = new shared_count();\n        }\n    }\n    ~smart_ptr() {\n        if(ptr_ && shared_count_->reduce_count()) {\n            delete ptr_;\n            delete shared_count_;\n        }\n    }\nprivate:\n    T* ptr_;\n    shared_count* shared_count_;\n};\n```\n\n\n\n新的swap函数：\n\n```cpp\nvoid swap(smart_ptr& rhs) {\n\tusing std::swap;\n\tswap(ptr_, rhs.ptr_);\n\tswap(shared_count_, rhs.shared_count_);\n}\n```\n\n\n\n新的拷贝构造，移动构造函数：\n\n```cpp\nsmart_ptr(const smart_ptr& other) {\n    ptr_ = other.ptr_;\n    if (ptr_) {\n      other.shared_count_->add_count();\n      shared_count_ = other.shared_count_;\n    }\n}\ntemplate <typename U>\nsmart_ptr(const smart_ptr<U>& other) {\n    ptr_ = other.ptr_;\n    if (ptr_) {\n      other.shared_count_->add_count();\n      shared_count_ = other.shared_count_;\n    }\n}\ntemplate <typename U>\nsmart_ptr(smart_ptr<U>&& other) {\n    ptr_ = other.ptr_;\n    if (ptr_) {\n      shared_count_ = other.shared_count_;\n      other.ptr_ = nullptr;\n    }\n}\n```\n\n\n\n**指针类型转换**\n\nc++中有不同的类型强制转换：\n`static_cast`、`reinterpret_cast`、`const_cast`、`dynamic_cast`\n\n","slug":"optimized_cpp-ch2","published":1,"updated":"2023-05-14T03:18:40.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsy7000h7ksh812ddumf","content":"<h1 id=\"ch2-实现智能指针\">Ch2 实现智能指针</h1>\r\n<p>智能指针最基本的功能：对超出作用域的对象进行释放</p>\r\n<span id=\"more\"></span>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class shape_type</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">shape_type</span> &#123;</span></span><br><span class=\"line\">    circle,</span><br><span class=\"line\">    triangle,</span><br><span class=\"line\">    rectangle,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// create shape</span></span><br><span class=\"line\"><span class=\"function\">shape* <span class=\"title\">create_shape</span><span class=\"params\">(shape_type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> shape_type::circle:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">circle</span>();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> shape_type::triangle:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">triangle</span>();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> shape_type::rectangle:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">rectangle</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// wrapper</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">shape_wrapper</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">shape_wrapper</span><span class=\"params\">(shape* ptr = <span class=\"literal\">nullptr</span>)</span>: ptr_(ptr) &#123;</span>&#125;</span><br><span class=\"line\">  ~<span class=\"built_in\">shape_wrapper</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ptr_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\">shape* <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> ptr_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  shape* ptr_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// example function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\">shape_wrapper <span class=\"title\">ptr_wrapper</span><span class=\"params\">(create_shape(...))</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>为了保证使用<code>create_shape</code>的返回值时，不会出现内存泄漏。我们需要把这个返回值放到一个本地变量中，并确保其析构函数会删除该对象。</p>\r\n<p><code>shape_wrapper</code>仍然缺少的功能：</p>\r\n<ul>\r\n<li>这个类只适用于shape类</li>\r\n<li>行为不太像指针</li>\r\n<li>拷贝这类对象会引发异常</li>\r\n</ul>\r\n<p><strong>包装任意类型的指针</strong></p>\r\n<p>使用模板：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">shape_wrapper</span><span class=\"params\">(T* ptr = <span class=\"literal\">nullptr</span>)</span>: ptr_(ptr) &#123;</span>&#125;</span><br><span class=\"line\">  ~<span class=\"built_in\">shape_wrapper</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ptr_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\">T* <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> ptr_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  T* ptr_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><strong>使<code>smart_ptr</code>行为更像指针</strong></p>\r\n<p>指针可以：</p>\r\n<ul>\r\n<li>用<code>*</code>解引用</li>\r\n<li>用<code>-&gt;</code>指向对象成员</li>\r\n<li>用在布尔表达式中</li>\r\n</ul>\r\n<p>加几个成员函数：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\tT&amp; <span class=\"keyword\">operator</span>*() <span class=\"keyword\">const</span> &#123;<span class=\"keyword\">return</span> *ptr_;&#125;</span><br><span class=\"line\">    T* <span class=\"keyword\">operator</span>-&gt;() <span class=\"keyword\">const</span> &#123;<span class=\"keyword\">return</span> ptr_;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">bool</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;<span class=\"keyword\">return</span> ptr_;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><strong>拷贝构造和赋值</strong></p>\r\n<p>在拷贝智能指针时，因为对象并没有复制一份，因此可能会对同一块内存释放两次，导致程序崩溃。</p>\r\n<p>因此需要禁用拷贝：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"built_in\">smart_ptr</span>(<span class=\"keyword\">const</span> smart_ptr&amp;)</span><br><span class=\"line\">        = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    smart_ptr&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> smart_ptr&amp;)</span><br><span class=\"line\">        = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>但是<code>smart_ptr&lt;shape&gt; ptr2&#123;ptr1&#125;</code>仍然可能出现释放两次内存的错误。</p>\r\n<p>因此尝试在拷贝时转移指针的所有权：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">smart_ptr</span>(smart_ptr&amp; other) &#123;</span><br><span class=\"line\">\t\tptr_ = other.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 赋值函数</span></span><br><span class=\"line\">    smart_ptr&amp; <span class=\"keyword\">operator</span>=(smart_ptr&amp; rhs) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">smart_ptr</span>(rhs).<span class=\"built_in\">swap</span>(*<span class=\"keyword\">this</span>); <span class=\"comment\">// 构造临时对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 释放对指针的所有权</span></span><br><span class=\"line\">    <span class=\"function\">T* <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T* ptr = ptr_;</span><br><span class=\"line\">        ptr_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换对指针的所有权</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(smart_ptr&amp; rhs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> std::swap;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(ptr_, rhs.ptr_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>上面的实现的问题是：</p>\r\n<p>如果把一个smart_ptr传递给另一个，你就不再拥有这个对象了。</p>\r\n<p><strong>使用“移动”改善smart_ptr的行为</strong></p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 移动构造</span></span><br><span class=\"line\">\t<span class=\"built_in\">smart_ptr</span>(smart_ptr&amp;&amp; other) &#123;</span><br><span class=\"line\">\t\tptr_ = other.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    smart_ptr&amp; <span class=\"keyword\">operator</span>=(smart_ptr rhs) &#123;</span><br><span class=\"line\">        rhs.<span class=\"built_in\">swap</span>(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>C++的规则：\r\n如果提供了移动构造函数而没有手动提供拷贝构造函数，那么后者会被禁用。</p>\r\n</blockquote>\r\n<p>因此：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smart_ptr&lt;shape&gt; ptr1&#123;<span class=\"built_in\">create_shape</span>(shape_type::circle)&#125;;</span><br><span class=\"line\">smart_ptr&lt;shape&gt; ptr2&#123;ptr1&#125;;             <span class=\"comment\">// 编译出错</span></span><br><span class=\"line\">smart_ptr&lt;shape&gt; ptr3;</span><br><span class=\"line\">ptr3 = ptr1;                             <span class=\"comment\">// 编译出错</span></span><br><span class=\"line\">ptr3 = std::<span class=\"built_in\">move</span>(ptr1);                  <span class=\"comment\">// OK，可以</span></span><br><span class=\"line\">smart_ptr&lt;shape&gt; ptr4&#123;std::<span class=\"built_in\">move</span>(ptr3)&#125;;  <span class=\"comment\">// OK，可以</span></span><br></pre></td></tr></table></figure>\r\n<p>以上就是C++11的<code>unique_ptr</code>的基本行为</p>\r\n<p>但是，一个<code>circle*</code>可以隐式地转换成<code>shape*</code>，而上面地<code>smart_ptr&lt;circle&gt;</code>却不能自动转换成<code>smart_ptr&lt;shape&gt;</code>，这还不够自然。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">smart_ptr</span>(smart_ptr&lt;U&gt;&amp;&amp; other) &#123;</span><br><span class=\"line\">        ptr_ = other.<span class=\"built_in\">release</span>(); <span class=\"comment\">// 不正确的转换会在编译时报错</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>上面的这个构造函数不会被编译器看作是移动构造函数</p>\r\n<p><strong>引用计数</strong></p>\r\n<p>和<code>unique_ptr</code>相比，多个<code>shared_ptr</code>可以同时拥有一个对象，因此它们需要共享一个计数。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">shared_count</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">shared_count</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">reduce_count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">get_count</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>添加了shared_count的smart_ptr：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">smart_ptr</span><span class=\"params\">(T* ptr = <span class=\"literal\">nullptr</span>)</span>: ptr_(ptr) &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr) &#123;</span><br><span class=\"line\">            shared_count_ = <span class=\"keyword\">new</span> <span class=\"built_in\">shared_count</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">smart_ptr</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr_ &amp;&amp; shared_count_-&gt;<span class=\"built_in\">reduce_count</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ptr_;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> shared_count_;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T* ptr_;</span><br><span class=\"line\">    shared_count* shared_count_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>新的swap函数：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(smart_ptr&amp; rhs)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> std::swap;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(ptr_, rhs.ptr_);</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(shared_count_, rhs.shared_count_);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>新的拷贝构造，移动构造函数：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">smart_ptr</span>(<span class=\"keyword\">const</span> smart_ptr&amp; other) &#123;</span><br><span class=\"line\">    ptr_ = other.ptr_;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr_) &#123;</span><br><span class=\"line\">      other.shared_count_-&gt;<span class=\"built_in\">add_count</span>();</span><br><span class=\"line\">      shared_count_ = other.shared_count_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\"><span class=\"built_in\">smart_ptr</span>(<span class=\"keyword\">const</span> smart_ptr&lt;U&gt;&amp; other) &#123;</span><br><span class=\"line\">    ptr_ = other.ptr_;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr_) &#123;</span><br><span class=\"line\">      other.shared_count_-&gt;<span class=\"built_in\">add_count</span>();</span><br><span class=\"line\">      shared_count_ = other.shared_count_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\"><span class=\"built_in\">smart_ptr</span>(smart_ptr&lt;U&gt;&amp;&amp; other) &#123;</span><br><span class=\"line\">    ptr_ = other.ptr_;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr_) &#123;</span><br><span class=\"line\">      shared_count_ = other.shared_count_;</span><br><span class=\"line\">      other.ptr_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>指针类型转换</strong></p>\r\n<p>c++中有不同的类型强制转换：\r\n<code>static_cast</code>、<code>reinterpret_cast</code>、<code>const_cast</code>、<code>dynamic_cast</code></p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"ch2-实现智能指针\">Ch2 实现智能指针</h1>\r\n<p>智能指针最基本的功能：对超出作用域的对象进行释放</p>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class shape_type</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">shape_type</span> &#123;</span></span><br><span class=\"line\">    circle,</span><br><span class=\"line\">    triangle,</span><br><span class=\"line\">    rectangle,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// create shape</span></span><br><span class=\"line\"><span class=\"function\">shape* <span class=\"title\">create_shape</span><span class=\"params\">(shape_type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> shape_type::circle:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">circle</span>();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> shape_type::triangle:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">triangle</span>();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> shape_type::rectangle:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">rectangle</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// wrapper</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">shape_wrapper</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">shape_wrapper</span><span class=\"params\">(shape* ptr = <span class=\"literal\">nullptr</span>)</span>: ptr_(ptr) &#123;</span>&#125;</span><br><span class=\"line\">  ~<span class=\"built_in\">shape_wrapper</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ptr_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\">shape* <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> ptr_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  shape* ptr_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// example function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\">shape_wrapper <span class=\"title\">ptr_wrapper</span><span class=\"params\">(create_shape(...))</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>为了保证使用<code>create_shape</code>的返回值时，不会出现内存泄漏。我们需要把这个返回值放到一个本地变量中，并确保其析构函数会删除该对象。</p>\r\n<p><code>shape_wrapper</code>仍然缺少的功能：</p>\r\n<ul>\r\n<li>这个类只适用于shape类</li>\r\n<li>行为不太像指针</li>\r\n<li>拷贝这类对象会引发异常</li>\r\n</ul>\r\n<p><strong>包装任意类型的指针</strong></p>\r\n<p>使用模板：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">shape_wrapper</span><span class=\"params\">(T* ptr = <span class=\"literal\">nullptr</span>)</span>: ptr_(ptr) &#123;</span>&#125;</span><br><span class=\"line\">  ~<span class=\"built_in\">shape_wrapper</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ptr_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\">T* <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> ptr_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  T* ptr_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><strong>使<code>smart_ptr</code>行为更像指针</strong></p>\r\n<p>指针可以：</p>\r\n<ul>\r\n<li>用<code>*</code>解引用</li>\r\n<li>用<code>-&gt;</code>指向对象成员</li>\r\n<li>用在布尔表达式中</li>\r\n</ul>\r\n<p>加几个成员函数：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\tT&amp; <span class=\"keyword\">operator</span>*() <span class=\"keyword\">const</span> &#123;<span class=\"keyword\">return</span> *ptr_;&#125;</span><br><span class=\"line\">    T* <span class=\"keyword\">operator</span>-&gt;() <span class=\"keyword\">const</span> &#123;<span class=\"keyword\">return</span> ptr_;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">bool</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;<span class=\"keyword\">return</span> ptr_;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><strong>拷贝构造和赋值</strong></p>\r\n<p>在拷贝智能指针时，因为对象并没有复制一份，因此可能会对同一块内存释放两次，导致程序崩溃。</p>\r\n<p>因此需要禁用拷贝：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"built_in\">smart_ptr</span>(<span class=\"keyword\">const</span> smart_ptr&amp;)</span><br><span class=\"line\">        = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    smart_ptr&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> smart_ptr&amp;)</span><br><span class=\"line\">        = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>但是<code>smart_ptr&lt;shape&gt; ptr2&#123;ptr1&#125;</code>仍然可能出现释放两次内存的错误。</p>\r\n<p>因此尝试在拷贝时转移指针的所有权：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">smart_ptr</span>(smart_ptr&amp; other) &#123;</span><br><span class=\"line\">\t\tptr_ = other.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 赋值函数</span></span><br><span class=\"line\">    smart_ptr&amp; <span class=\"keyword\">operator</span>=(smart_ptr&amp; rhs) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">smart_ptr</span>(rhs).<span class=\"built_in\">swap</span>(*<span class=\"keyword\">this</span>); <span class=\"comment\">// 构造临时对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 释放对指针的所有权</span></span><br><span class=\"line\">    <span class=\"function\">T* <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T* ptr = ptr_;</span><br><span class=\"line\">        ptr_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换对指针的所有权</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(smart_ptr&amp; rhs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> std::swap;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(ptr_, rhs.ptr_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>上面的实现的问题是：</p>\r\n<p>如果把一个smart_ptr传递给另一个，你就不再拥有这个对象了。</p>\r\n<p><strong>使用“移动”改善smart_ptr的行为</strong></p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 移动构造</span></span><br><span class=\"line\">\t<span class=\"built_in\">smart_ptr</span>(smart_ptr&amp;&amp; other) &#123;</span><br><span class=\"line\">\t\tptr_ = other.<span class=\"built_in\">release</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    smart_ptr&amp; <span class=\"keyword\">operator</span>=(smart_ptr rhs) &#123;</span><br><span class=\"line\">        rhs.<span class=\"built_in\">swap</span>(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>C++的规则：\r\n如果提供了移动构造函数而没有手动提供拷贝构造函数，那么后者会被禁用。</p>\r\n</blockquote>\r\n<p>因此：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smart_ptr&lt;shape&gt; ptr1&#123;<span class=\"built_in\">create_shape</span>(shape_type::circle)&#125;;</span><br><span class=\"line\">smart_ptr&lt;shape&gt; ptr2&#123;ptr1&#125;;             <span class=\"comment\">// 编译出错</span></span><br><span class=\"line\">smart_ptr&lt;shape&gt; ptr3;</span><br><span class=\"line\">ptr3 = ptr1;                             <span class=\"comment\">// 编译出错</span></span><br><span class=\"line\">ptr3 = std::<span class=\"built_in\">move</span>(ptr1);                  <span class=\"comment\">// OK，可以</span></span><br><span class=\"line\">smart_ptr&lt;shape&gt; ptr4&#123;std::<span class=\"built_in\">move</span>(ptr3)&#125;;  <span class=\"comment\">// OK，可以</span></span><br></pre></td></tr></table></figure>\r\n<p>以上就是C++11的<code>unique_ptr</code>的基本行为</p>\r\n<p>但是，一个<code>circle*</code>可以隐式地转换成<code>shape*</code>，而上面地<code>smart_ptr&lt;circle&gt;</code>却不能自动转换成<code>smart_ptr&lt;shape&gt;</code>，这还不够自然。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">smart_ptr</span>(smart_ptr&lt;U&gt;&amp;&amp; other) &#123;</span><br><span class=\"line\">        ptr_ = other.<span class=\"built_in\">release</span>(); <span class=\"comment\">// 不正确的转换会在编译时报错</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>上面的这个构造函数不会被编译器看作是移动构造函数</p>\r\n<p><strong>引用计数</strong></p>\r\n<p>和<code>unique_ptr</code>相比，多个<code>shared_ptr</code>可以同时拥有一个对象，因此它们需要共享一个计数。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">shared_count</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">shared_count</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">reduce_count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">get_count</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>添加了shared_count的smart_ptr：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">smart_ptr</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">smart_ptr</span><span class=\"params\">(T* ptr = <span class=\"literal\">nullptr</span>)</span>: ptr_(ptr) &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr) &#123;</span><br><span class=\"line\">            shared_count_ = <span class=\"keyword\">new</span> <span class=\"built_in\">shared_count</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">smart_ptr</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ptr_ &amp;&amp; shared_count_-&gt;<span class=\"built_in\">reduce_count</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ptr_;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> shared_count_;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T* ptr_;</span><br><span class=\"line\">    shared_count* shared_count_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>新的swap函数：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(smart_ptr&amp; rhs)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> std::swap;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(ptr_, rhs.ptr_);</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(shared_count_, rhs.shared_count_);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>新的拷贝构造，移动构造函数：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">smart_ptr</span>(<span class=\"keyword\">const</span> smart_ptr&amp; other) &#123;</span><br><span class=\"line\">    ptr_ = other.ptr_;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr_) &#123;</span><br><span class=\"line\">      other.shared_count_-&gt;<span class=\"built_in\">add_count</span>();</span><br><span class=\"line\">      shared_count_ = other.shared_count_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\"><span class=\"built_in\">smart_ptr</span>(<span class=\"keyword\">const</span> smart_ptr&lt;U&gt;&amp; other) &#123;</span><br><span class=\"line\">    ptr_ = other.ptr_;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr_) &#123;</span><br><span class=\"line\">      other.shared_count_-&gt;<span class=\"built_in\">add_count</span>();</span><br><span class=\"line\">      shared_count_ = other.shared_count_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\"><span class=\"built_in\">smart_ptr</span>(smart_ptr&lt;U&gt;&amp;&amp; other) &#123;</span><br><span class=\"line\">    ptr_ = other.ptr_;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr_) &#123;</span><br><span class=\"line\">      shared_count_ = other.shared_count_;</span><br><span class=\"line\">      other.ptr_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>指针类型转换</strong></p>\r\n<p>c++中有不同的类型强制转换：\r\n<code>static_cast</code>、<code>reinterpret_cast</code>、<code>const_cast</code>、<code>dynamic_cast</code></p>"},{"title":"云服务器部署 Grafana 监控记录","copyright":true,"date":"2023-07-19T07:55:33.000Z","updated":"2023-07-19T07:55:33.000Z","description":null,"_content":"\n\n\n## 0x00 简介\n\n记录在腾讯云服务器上面配置prometheus+grafana，监视云主机运行状态的过程。\n\n<!-- more -->\n\n## 0x01 整体结构\n\n要部署的服务有prometheus、grafana、node_exporter，前两个在docker中部署，node_exporter因为要采集宿主机的指标信息，所以没有用docker运行。\n\n数据上报的过程是：\n\nnode_exporter (9100 port) => prometheus (9090 port) => grafana (3000 port)\n\n\n\n## 0x02 \n\n**Docker**\n\n部署比较简单，拉取镜像，指定配置文件映射，再启动容器就ok了。\n\ngrafana官方网站有一些dashboard模板，可以通过ID导入，省去了自建dashboard的麻烦。\n\n\n\n**效果图**\n\n![image-20230719160454386](image-20230719160454386.png)\n\n\n\n## 0x03 其他\n\n因为prometheus和grafana是通过docker启动的，在配置里面要用docker容器的ip\n\n![image-20230719160714202](image-20230719160714202.png)\n\n查询容器的ip：\n\n```bash\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container_name_or_id>\n```\n\n","source":"_posts/ubuntu-grafana.md","raw":"---\ntitle: 云服务器部署 Grafana 监控记录\ntags: [Grafana, Docker]\ncategories: [数据可视化]\ncopyright: true\ndate: 2023-07-19 15:55:33\nupdated: 2023-07-19 15:55:33\npermalink:\ndescription:\n---\n\n\n\n## 0x00 简介\n\n记录在腾讯云服务器上面配置prometheus+grafana，监视云主机运行状态的过程。\n\n<!-- more -->\n\n## 0x01 整体结构\n\n要部署的服务有prometheus、grafana、node_exporter，前两个在docker中部署，node_exporter因为要采集宿主机的指标信息，所以没有用docker运行。\n\n数据上报的过程是：\n\nnode_exporter (9100 port) => prometheus (9090 port) => grafana (3000 port)\n\n\n\n## 0x02 \n\n**Docker**\n\n部署比较简单，拉取镜像，指定配置文件映射，再启动容器就ok了。\n\ngrafana官方网站有一些dashboard模板，可以通过ID导入，省去了自建dashboard的麻烦。\n\n\n\n**效果图**\n\n![image-20230719160454386](image-20230719160454386.png)\n\n\n\n## 0x03 其他\n\n因为prometheus和grafana是通过docker启动的，在配置里面要用docker容器的ip\n\n![image-20230719160714202](image-20230719160714202.png)\n\n查询容器的ip：\n\n```bash\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container_name_or_id>\n```\n\n","slug":"ubuntu-grafana","published":1,"_id":"clk9fxsy9000j7kshgqr35xmf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"x00-简介\">0x00 简介</h2>\r\n<p>记录在腾讯云服务器上面配置prometheus+grafana，监视云主机运行状态的过程。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"x01-整体结构\">0x01 整体结构</h2>\r\n<p>要部署的服务有prometheus、grafana、node_exporter，前两个在docker中部署，node_exporter因为要采集宿主机的指标信息，所以没有用docker运行。</p>\r\n<p>数据上报的过程是：</p>\r\n<p>node_exporter (9100 port) =&gt; prometheus (9090 port) =&gt; grafana\r\n(3000 port)</p>\r\n<h2 id=\"x02\">0x02</h2>\r\n<p><strong>Docker</strong></p>\r\n<p>部署比较简单，拉取镜像，指定配置文件映射，再启动容器就ok了。</p>\r\n<p>grafana官方网站有一些dashboard模板，可以通过ID导入，省去了自建dashboard的麻烦。</p>\r\n<p><strong>效果图</strong></p>\r\n<figure>\r\n<img src=\"image-20230719160454386.png\" alt=\"image-20230719160454386\" />\r\n<figcaption aria-hidden=\"true\">image-20230719160454386</figcaption>\r\n</figure>\r\n<h2 id=\"x03-其他\">0x03 其他</h2>\r\n<p>因为prometheus和grafana是通过docker启动的，在配置里面要用docker容器的ip</p>\r\n<figure>\r\n<img src=\"image-20230719160714202.png\" alt=\"image-20230719160714202\" />\r\n<figcaption aria-hidden=\"true\">image-20230719160714202</figcaption>\r\n</figure>\r\n<p>查询容器的ip：</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect -f <span class=\"string\">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> &lt;container_name_or_id&gt;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"x00-简介\">0x00 简介</h2>\r\n<p>记录在腾讯云服务器上面配置prometheus+grafana，监视云主机运行状态的过程。</p>","more":"<h2 id=\"x01-整体结构\">0x01 整体结构</h2>\r\n<p>要部署的服务有prometheus、grafana、node_exporter，前两个在docker中部署，node_exporter因为要采集宿主机的指标信息，所以没有用docker运行。</p>\r\n<p>数据上报的过程是：</p>\r\n<p>node_exporter (9100 port) =&gt; prometheus (9090 port) =&gt; grafana\r\n(3000 port)</p>\r\n<h2 id=\"x02\">0x02</h2>\r\n<p><strong>Docker</strong></p>\r\n<p>部署比较简单，拉取镜像，指定配置文件映射，再启动容器就ok了。</p>\r\n<p>grafana官方网站有一些dashboard模板，可以通过ID导入，省去了自建dashboard的麻烦。</p>\r\n<p><strong>效果图</strong></p>\r\n<figure>\r\n<img src=\"image-20230719160454386.png\" alt=\"image-20230719160454386\" />\r\n<figcaption aria-hidden=\"true\">image-20230719160454386</figcaption>\r\n</figure>\r\n<h2 id=\"x03-其他\">0x03 其他</h2>\r\n<p>因为prometheus和grafana是通过docker启动的，在配置里面要用docker容器的ip</p>\r\n<figure>\r\n<img src=\"image-20230719160714202.png\" alt=\"image-20230719160714202\" />\r\n<figcaption aria-hidden=\"true\">image-20230719160714202</figcaption>\r\n</figure>\r\n<p>查询容器的ip：</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect -f <span class=\"string\">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> &lt;container_name_or_id&gt;</span><br></pre></td></tr></table></figure>"},{"title":"go-redis","copyright":true,"date":"2023-05-14T15:16:22.000Z","updated":"2023-05-14T15:16:22.000Z","keywords":null,"description":null,"_content":"\n\n\n<!-- more -->","source":"_drafts/go-redis.md","raw":"---\ntitle: go-redis\ncopyright: true\ndate: 2023-05-14 23:16:22\nupdated: 2023-05-14 23:16:22\ntags: [Redis]\ncategories: [造轮子]\nkeywords:\ndescription:\n---\n\n\n\n<!-- more -->","slug":"go-redis","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"clk9fxsyd000n7kshf78q6k2z","content":"<span id=\"more\"></span>\r\n","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[{"_id":"source/_posts/Linux-ptrace/output.png","slug":"output.png","post":"clk9fxsxh00017ksh260r1ozd","modified":0,"renderable":0},{"_id":"source/_posts/ubuntu-grafana/image-20230719160454386.png","slug":"image-20230719160454386.png","post":"clk9fxsy9000j7kshgqr35xmf","modified":0,"renderable":0},{"_id":"source/_posts/ubuntu-grafana/image-20230719160714202.png","slug":"image-20230719160714202.png","post":"clk9fxsy9000j7kshgqr35xmf","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clk9fxsxh00017ksh260r1ozd","category_id":"clk9fxsxr00047ksh8rzmag7v","_id":"clk9fxsy4000e7kshbixg7ul8"},{"post_id":"clk9fxsxn00037kshh8etbuue","category_id":"clk9fxsy000097kshgzrhh46s","_id":"clk9fxsyb000k7ksh72wv2z73"},{"post_id":"clk9fxsy3000d7ksh4g1daeqi","category_id":"clk9fxsxr00047ksh8rzmag7v","_id":"clk9fxsyg000p7kshgwoj74j3"},{"post_id":"clk9fxsxv00067ksh8iut39uk","category_id":"clk9fxsy5000f7ksh4d2i3u7a","_id":"clk9fxsyh000r7kshgne640cu"},{"post_id":"clk9fxsxx00077ksh50op8wwn","category_id":"clk9fxsy5000f7ksh4d2i3u7a","_id":"clk9fxsyi000u7ksh9xd8feau"},{"post_id":"clk9fxsxz00087ksh1p69d7dg","category_id":"clk9fxsyh000q7kshdwnj3dsc","_id":"clk9fxsyk000y7kshdicyfrg2"},{"post_id":"clk9fxsy2000c7kshd4s35qa8","category_id":"clk9fxsyh000q7kshdwnj3dsc","_id":"clk9fxsyl00117ksh7q6ce9u0"},{"post_id":"clk9fxsy7000h7ksh812ddumf","category_id":"clk9fxsyj000x7ksh7vh0gics","_id":"clk9fxsyn00167kshaey5bgo4"},{"post_id":"clk9fxsy9000j7kshgqr35xmf","category_id":"clk9fxsyl00137ksh14a16vp9","_id":"clk9fxsyo00197ksha194dbgs"},{"post_id":"clk9fxsyd000n7kshf78q6k2z","category_id":"clk9fxsyn00177kshcalf5m9q","_id":"clk9fxsyo001c7ksh2hjua4bi"}],"PostTag":[{"post_id":"clk9fxsxh00017ksh260r1ozd","tag_id":"clk9fxsxt00057kshdi9w7mzf","_id":"clk9fxsy2000b7kshala1en1b"},{"post_id":"clk9fxsxv00067ksh8iut39uk","tag_id":"clk9fxsy1000a7kshhy9b4xfx","_id":"clk9fxsy9000i7ksh788w2gtb"},{"post_id":"clk9fxsxx00077ksh50op8wwn","tag_id":"clk9fxsy1000a7kshhy9b4xfx","_id":"clk9fxsyg000o7ksh3m5k5tf3"},{"post_id":"clk9fxsy2000c7kshd4s35qa8","tag_id":"clk9fxsyb000l7ksh15796wlv","_id":"clk9fxsyi000t7ksha53ucxvg"},{"post_id":"clk9fxsy3000d7ksh4g1daeqi","tag_id":"clk9fxsyh000s7ksha8iobhct","_id":"clk9fxsyl00107kshh60d6c1n"},{"post_id":"clk9fxsy3000d7ksh4g1daeqi","tag_id":"clk9fxsyj000w7ksh474211lb","_id":"clk9fxsyl00127kshfwbv0px3"},{"post_id":"clk9fxsy7000h7ksh812ddumf","tag_id":"clk9fxsyk000z7ksh32ftgvgh","_id":"clk9fxsym00157kshf9ks0ewl"},{"post_id":"clk9fxsy9000j7kshgqr35xmf","tag_id":"clk9fxsym00147ksh3mnx2h1k","_id":"clk9fxsyo001b7ksh63md1w3n"},{"post_id":"clk9fxsy9000j7kshgqr35xmf","tag_id":"clk9fxsyn00187kshbuq6b371","_id":"clk9fxsyo001d7kshfebjape5"},{"post_id":"clk9fxsyd000n7kshf78q6k2z","tag_id":"clk9fxsyo001a7ksh4d6l4d82","_id":"clk9fxsyp001e7ksh0xaf54h4"}],"Tag":[{"name":"Linux","_id":"clk9fxsxt00057kshdi9w7mzf"},{"name":"Elasticsearch","_id":"clk9fxsy1000a7kshhy9b4xfx"},{"name":"Puzzle","_id":"clk9fxsyb000l7ksh15796wlv"},{"name":"Register","_id":"clk9fxsyh000s7ksha8iobhct"},{"name":"GDB","_id":"clk9fxsyj000w7ksh474211lb"},{"name":"C++","_id":"clk9fxsyk000z7ksh32ftgvgh"},{"name":"Grafana","_id":"clk9fxsym00147ksh3mnx2h1k"},{"name":"Docker","_id":"clk9fxsyn00187kshbuq6b371"},{"name":"Redis","_id":"clk9fxsyo001a7ksh4d6l4d82"}]}}